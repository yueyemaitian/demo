<?xml version='1.0' encoding='UTF-8'?>
<hotspot_log version='160 1' process='2065' time_ms='1397049757148'>
<vm_version>
<name>
OpenJDK 64-Bit Server VM
</name>
<release>
24.80-b04-fastdebug
</release>
<info>
OpenJDK 64-Bit Server VM (24.80-b04-fastdebug) for bsd-amd64 JRE (1.7.0-internal-fastdebug-fanhua_2014_03_29_15_49-b00), built on Mar 29 2014 16:17:55 by &quot;fanhua&quot; with gcc 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.38)
</info>
</vm_version>
<vm_arguments>
<args>
-XX:+PrintAssembly -Didea.launcher.port=7532 -Didea.launcher.bin.path=/Applications/IntelliJ IDEA 13.app/bin -Dfile.encoding=GBK 
</args>
<command>
com.intellij.rt.execution.application.AppMain com.tmall.buy.EqualsTest -verbose:gc -XX:+PrintInlining -XX:+PrintGCDetails
</command>
<launcher>
SUN_STANDARD
</launcher>
<properties>
java.vm.specification.name=Java Virtual Machine Specification
java.vm.version=24.80-b04-fastdebug
java.vm.name=OpenJDK 64-Bit Server VM
java.vm.info=mixed mode, sharing
java.ext.dirs=/Users/fanhua/Library/Java/Extensions:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java
java.endorsed.dirs=/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/endorsed
sun.boot.library.path=/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib
java.library.path=/Users/fanhua/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.
java.home=/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre
java.class.path=/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/lib/dt.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/lib/jconsole.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/lib/sa-jdi.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/lib/tools.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/charsets.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/jce.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/jsse.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/management-agent.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/resources.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/rt.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/ext/dnsns.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/ext/localedata.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/ext/sunec.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/ext/sunjce_provider.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/ext/sunpkcs11.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/ext/zipfs.jar:/Users/fanhua/develop/workspace/Test/target/classes:/Applications/IntelliJ IDEA 13.app/lib/idea_rt.jar
sun.boot.class.path=/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/resources.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/rt.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/sunrsasign.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/jsse.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/jce.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/charsets.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/lib/jfr.jar:/Users/fanhua/develop/openjdk-home/openjdk7/build/macosx-x86_64-fastdebug/j2sdk-image/jre/classes
java.vm.specification.vendor=Oracle Corporation
java.vm.specification.version=1.7
java.vm.vendor=Oracle Corporation
idea.launcher.port=7532
idea.launcher.bin.path=/Applications/IntelliJ IDEA 13.app/bin
file.encoding=GBK
sun.java.command=com.intellij.rt.execution.application.AppMain com.tmall.buy.EqualsTest -verbose:gc -XX:+PrintInlining -XX:+PrintGCDetails
sun.java.launcher=SUN_STANDARD
</properties>
</vm_arguments>
<tty>
OpenJDK 64-Bit Server VM warning: PrintAssembly is enabled; turning on DebugNonSafepoints to gain additional output
<writer thread='20227'/>
Could not load hsdis-amd64.dylib; library not loadable; PrintAssembly is disabled
<writer thread='20739'/>
Could not load hsdis-amd64.dylib; library not loadable; PrintAssembly is disabled
PrintAssembly request changed to PrintOptoAssembly
<writer thread='20227'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='1'>
{method} 
 - klass: {other class}
 - this oop:          0x00000006fae088d8
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00000006fae02da0 constant pool [666] for &apos;java/lang/String&apos; cache=0x00000006faebf920
 - access:            0xc1000001  public 
 - name:              &apos;hashCode&apos;
 - signature:         &apos;()I&apos;
 - max stack:         5
 - max locals:        4
 - size of params:    1
 - method size:       16
 - vtable index:      3
 - i2i entry:         0x0000000103a96780
 - adapters:          AHE@0x00007fda94878670: 0xb0000000 i2c: 0x0000000103b468e0 c2i: 0x0000000103b469f4 c2iUV: 0x0000000103b469c7
 - compiled entry     0x0000000103b469f4
 - code size:         55
 - code start:        0x00000006fae08860
 - code end (excl):   0x00000006fae08897
 - method data:       0x00000006fb032500
 - checked ex length: 0
 - linenumber start:  0x00000006fae08897
 - localvar length:   4
 - localvar start:    0x00000006fae088a6
#
#  int ( java/lang/String:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N221: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_heap_oop_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B19 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movq    R10, RSI	# spill
02f   	movl    RAX, [RSI + #16 (8-bit)]	# int ! Field: java/lang/String.hash
032   	testl   RAX, RAX
034   	jne     B19  P=0.502196 C=683.000000
034
03a   B2: #	B22 B3 &lt;- B1  Freq: 0.497804
03a   	movl    RBP, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
03d   	movl    R8, [R12 + RBP &lt;&lt; 3 + #12] (compressed oop addressing)	# range
042   	NullCheck RBP
042
042   B3: #	B20 B4 &lt;- B2  Freq: 0.497803
042   	xorl    RCX, RCX	# int
044   	testl   R8, R8
047   	jle     B20  P=0.141176 C=340.000000
047
04d   B4: #	B21 B5 &lt;- B3  Freq: 0.427525
04d   	testl  R8, R8	# unsigned
050   	jbe,u  B21  P=0.000001 C=-1.000000
050
056   B5: #	B21 B6 &lt;- B4  Freq: 0.427525
056   	movl    RBX, R8	# spill
059   	decl    RBX	# int
05b   	cmpl    RBX, R8	# unsigned
05e   	jnb,u  B21  P=0.000001 C=-1.000000
05e
064   B6: #	B7 &lt;- B5  Freq: 0.427524
064   	decode_heap_oop_not_null RDX,RBP
068   	xorl    RBP, RBP	# int
06a
06a   B7: #	B9 B8 &lt;- B6 B8 	Loop: B7-B8 inner pre of N200 Freq: 0.855049
06a   	movzwl  R11, [RDX + #16 + RCX &lt;&lt; #1]	# ushort/char
070   	addl    RBP, R11	# int
073   	movl    R11, RBP	# spill
076   	sall    R11, #5
07a   	movl    RAX, R11	# spill
07d   	subl    RAX, RBP	# int
07f   	incl    RCX	# int
081   	cmpl    RCX, #1
084   	jge,s   B9	# loop end  P=0.500000 C=12753.000000
084
086   B8: #	B7 &lt;- B7  Freq: 0.427524
086   	movl    RBP, RAX	# spill
088   	jmp,s   B7
088
08a   B9: #	B15 B10 &lt;- B7  Freq: 0.427524
08a   	movl    RDI, R8	# spill
08d   	addl    RDI, #-3	# int
090   	movl    R9, #-2147483648	# int
096   	cmpl    RBX, RDI
098   	cmovll RDI, R9	# signed, int
09c   	cmpl    RCX, RDI
09e   	jl,s   B15  P=0.999999 C=-1.000000
09e
0a0   B10: #	B16 &lt;- B9  Freq: 4.33201e-07
0a0   	movl    RAX, R11	# spill
0a3   	jmp,s   B16
0a3
0a5   B11: #	B12 &lt;- B12  Freq: 0.213762
0a5   	movl    R9, RAX	# spill
0a8   	sall    R9, #5
0ac   	movl    RBP, RAX	# spill
0ae   	movl    RAX, R9	# spill
0ae
0b1   B12: #	B11 B13 &lt;- B16 B11 	Loop: B12-B11 inner post of N200 Freq: 0.427524
0b1   	movzwl  R11, [RDX + #16 + RCX &lt;&lt; #1]	# ushort/char
0b7   	subl    RAX, RBP	# int
0b9   	addl    RAX, R11	# int
0bc   	incl    RCX	# int
0be   	cmpl    RCX, R8
0c1   	jl,s   B11	# loop end  P=0.500000 C=12753.000000
0c1
0c3   B13: #	B18 &lt;- B12  Freq: 0.213762
0c3   	jmp,s   B18
      	nop 	# 11 bytes pad for loops and calls

0d0   B14: #	B15 &lt;- B15  top-of-loop Freq: 18.6082
0d0   	subl    RAX, RBP	# int
0d2
0d2   B15: #	B14 B16 &lt;- B9 B14 	Loop: B15-B14 inner main of N78 Freq: 19.0358
0d2   	movzwl  R11, [RDX + #16 + RCX &lt;&lt; #1]	# ushort/char
0d8   	addl    RAX, R11	# int
0db   	movslq  R11, RCX	# i2l
0de   	movzwl  RSI, [RDX + #18 + R11 &lt;&lt; #1]	# ushort/char
0e4   	movzwl  R9, [RDX + #22 + R11 &lt;&lt; #1]	# ushort/char
0ea   	movzwl  R11, [RDX + #20 + R11 &lt;&lt; #1]	# ushort/char
0f0   	movl    RBX, RAX	# spill
0f2   	sall    RBX, #5
0f5   	subl    RBX, RAX	# int
0f7   	addl    RBX, RSI	# int
0f9   	movl    RSI, RBX	# spill
0fb   	sall    RSI, #5
0fe   	subl    RSI, RBX	# int
100   	addl    RSI, R11	# int
103   	movl    RBP, RSI	# spill
105   	sall    RBP, #5
108   	subl    RBP, RSI	# int
10a   	addl    RBP, R9	# int
10d   	movl    RAX, RBP	# spill
10f   	sall    RAX, #5
112   	addl    RCX, #4	# int
115   	cmpl    RCX, RDI
117   	jl,s   B14	# loop end  P=0.977541 C=12753.000000
117
119   B16: #	B12 B17 &lt;- B10 B15  Freq: 0.427524
119   	cmpl    RCX, R8
11c   	jl,s   B12  P=0.500000 C=-1.000000
11c
11e   B17: #	B18 &lt;- B16  Freq: 0.213762
11e   	movl    RAX, RBP	# spill
11e
120   B18: #	B19 &lt;- B13 B17  Freq: 0.427524
120   	movl    [R10 + #16 (8-bit)], RAX	# int ! Field: java/lang/String.hash
120
124   B19: #	N221 &lt;- B18 B20 B1  Freq: 0.999999
124   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

12f   	ret
12f
130   B20: #	B19 &lt;- B3  Freq: 0.0702781
130   	xorl    RAX, RAX	# int
132   	jmp,s   B19
132
134   B21: #	N221 &lt;- B5 B4  Freq: 8.60727e-07
134   	movl    RSI, #-122	# int
139   	movq    [rsp + #0], R10	# spill
      	nop 	# 2 bytes pad for loops and calls
13f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::hashCode @ bci:33  L[0]=rsp + #0 L[1]=#0 L[2]=RBP L[3]=#0
        # OopMap{rbp=NarrowOop [0]=Oop off=324}
144   	int3	# ShouldNotReachHere
144
149   B22: #	N221 &lt;- B2  Freq: 5.04414e-07
149   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
14f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::hashCode @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # OopMap{off=340}
154   	int3	# ShouldNotReachHere
154

</opto_assembly>
<writer thread='20739'/>
<opto_assembly compile_id='2' compile_kind='osr'>
{method} 
 - klass: {other class}
 - this oop:          0x00000006fae08b28
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00000006fae02da0 constant pool [666] for &apos;java/lang/String&apos; cache=0x00000006faebf920
 - access:            0xc1000001  public 
 - name:              &apos;indexOf&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         5
 - max locals:        6
 - size of params:    3
 - method size:       16
 - vtable index:      -2
 - i2i entry:         0x0000000103a96780
 - adapters:          AHE@0x00007fda94878d50: 0xbaa00000 i2c: 0x0000000103b566a0 c2i: 0x0000000103b567e0 c2iUV: 0x0000000103b567b3
 - compiled entry     0x0000000103b567e0
 - code size:         70
 - code start:        0x00000006fae08a80
 - code end (excl):   0x00000006fae08ac6
 - method data:       0x00000006fb05d5e0
 - checked ex length: 0
 - linenumber start:  0x00000006fae08ac6
 - localvar length:   6
 - localvar start:    0x00000006fae08ade
#
#  int ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N266: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B22 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

01c   	movl    R13, [RSI]	# int
01f   	movq    R14, [RSI + #8 (8-bit)]	# ptr
023   	movl    RBX, [RSI + #32 (8-bit)]	# int
026   	movl    RBP, [RSI + #16 (8-bit)]	# int
029   	movq    RDI, RSI	# spill
02c   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
039   	testq   R14, R14	# ptr
03c   	je     B22  P=0.001000 C=-1.000000
03c
042   B2: #	B29 B3 &lt;- B1  Freq: 0.999
042   	movl    R11, [R14 + #8 (8-bit)]	# compressed klass ptr
046   	cmpl    R11, narrowoop: precise klass [C: 0x00007fda94062ea8:Constant:exact *	# compressed ptr
04d   	jne,u  B29  P=0.000001 C=-1.000000
04d
053   B3: #	B4 &lt;- B2  Freq: 0.998999
053   	# checkcastPP of R14
053   	movq    R10, R14	# spill
056   	addq    R10, #12	# ptr
05a
05a   B4: #	B20 B5 &lt;- B3 B22  Freq: 0.999999
05a   	cmpl    R13, RBP
05d   	jge     B20  P=0.015053 C=12888.000000
05d
063   B5: #	B6 &lt;- B4  Freq: 0.984946
063   	movl    R11, R13	# spill
066   	incl    R11	# int
069   	xorl    R8, R8	# int
06c   	cmpl    R11, R8
06f   	cmovllt R11, R8	# max
073   	cmpl    R11, RBP
076   	cmovlgt R11, RBP	# min
076
07a   B6: #	B27 B7 &lt;- B5 B9 	Loop: B6-B9 inner pre of N230 Freq: 1.96989
07a   	testq   R14, R14	# ptr
07d   	je     B27  P=0.000001 C=-1.000000
07d
083   B7: #	B28 B8 &lt;- B6  Freq: 1.96989
083   	movl    R9, [R10]	# range
086   	cmpl    R13, R9	# unsigned
089   	jnb,u  B28  P=0.000001 C=-1.000000
089
08f   B8: #	B26 B9 &lt;- B7  Freq: 1.96988
08f   	movzwl  R8, [R14 + #16 + R13 &lt;&lt; #1]	# ushort/char
095   	cmpl    R8, RBX
098   	je     B26  P=0.000000 C=12694.000000
098
09e   B9: #	B6 B10 &lt;- B8  Freq: 1.96988
09e   	incl    R13	# int
0a1   	cmpl    R13, R11
0a4   	jl,s   B6	# loop end  P=0.500000 C=12888.000000
0a4
0a6   B10: #	B16 B11 &lt;- B9  Freq: 0.984941
0a6   	cmpl    RBP, R9
0a9   	movl    R11, RBP	# spill
0ac   	cmovlgt R11, R9	# min
0b0   	movl    RDI, R11	# spill
0b3   	addl    RDI, #-3	# int
0b6   	movl    R8, #-2147483648	# int
0bc   	cmpl    R11, RDI
0bf   	cmovll RDI, R8	# signed, int
0c3   	cmpl    R13, RDI
0c6   	jge,s   B16  P=0.000001 C=-1.000000
      	nop 	# 8 bytes pad for loops and calls

0d0   B11: #	B26 B12 &lt;- B10 B15 	Loop: B11-B15 inner main of N115 Freq: 65.4245
0d0   	movzwl  R10, [R14 + #16 + R13 &lt;&lt; #1]	# ushort/char
0d6   	cmpl    R10, RBX
0d9   	je,s   B26  P=0.000000 C=12694.000000
0d9
0db   B12: #	B24 B13 &lt;- B11  Freq: 65.4245
0db   	movslq  R10, R13	# i2l
0de   	movzwl  R8, [R14 + #18 + R10 &lt;&lt; #1]	# ushort/char
0e4   	cmpl    R8, RBX
0e7   	je,s   B24  P=0.000000 C=12694.000000
0e7
0e9   B13: #	B25 B14 &lt;- B12  Freq: 65.4244
0e9   	movzwl  R11, [R14 + #20 + R10 &lt;&lt; #1]	# ushort/char
0ef   	cmpl    R11, RBX
0f2   	je,s   B25  P=0.000000 C=12694.000000
0f2
0f4   B14: #	B23 B15 &lt;- B13  Freq: 65.4244
0f4   	movzwl  R10, [R14 + #22 + R10 &lt;&lt; #1]	# ushort/char
0fa   	cmpl    R10, RBX
0fd   	je,s   B23  P=0.000000 C=12694.000000
0fd
0ff   B15: #	B11 B16 &lt;- B14  Freq: 65.4244
0ff   	addl    R13, #4	# int
103   	cmpl    R13, RDI
106   	jl,s   B11	# loop end  P=0.984947 C=12888.000000
106
108   B16: #	B20 B17 &lt;- B10 B15  Freq: 0.984816
108   	cmpl    R13, RBP
10b   	jge,s   B20  P=0.500000 C=-1.000000
      	nop 	# 3 bytes pad for loops and calls

110   B17: #	B28 B18 &lt;- B16 B19 	Loop: B17-B19 inner post of N230 Freq: 0.984815
110   	cmpl    R13, R9	# unsigned
113   	jnb,us  B28  P=0.000001 C=-1.000000
113
115   B18: #	B26 B19 &lt;- B17  Freq: 0.984814
115   	movzwl  R11, [R14 + #16 + R13 &lt;&lt; #1]	# ushort/char
11b   	cmpl    R11, RBX
11e   	je,s   B26  P=0.000000 C=12694.000000
11e
120   B19: #	B17 B20 &lt;- B18  Freq: 0.984814
120   	incl    R13	# int
123   	cmpl    R13, RBP
126   	jl,s   B17	# loop end  P=0.500000 C=12888.000000
126
128   B20: #	B21 &lt;- B4 B16 B19  Freq: 0.999868
128   	movl    RAX, #-1	# int
128
12d   B21: #	N266 &lt;- B26 B20  Freq: 0.999994
12d   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

138   	ret
138
139   B22: #	B4 &lt;- B1  Freq: 0.000999987
139   	xorl    R14, R14	# ptr
13c   	movl    R10, NULL+12	# ptr (positive 32-bit)
142   	jmp     B4
142
147   B23: #	B24 &lt;- B14  Freq: 3.11968e-05
147   	addl    R13, #2	# int
14b
14b   B24: #	B26 &lt;- B12 B23  Freq: 6.23936e-05
14b   	incl    R13	# int
14e   	jmp,s   B26
14e
150   B25: #	B26 &lt;- B13  Freq: 3.11968e-05
150   	addl    R13, #2	# int
154
154   B26: #	B21 &lt;- B18 B8 B11 B25 B24  Freq: 0.000126196
154   	movl    RAX, R13	# spill
157   	jmp,s   B21
157
159   B27: #	N266 &lt;- B6  Freq: 1.99605e-06
159   	movl    RSI, #-10	# int
15e   	movl    RBP, R13	# spill
      	nop 	# 2 bytes pad for loops and calls
163   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:47  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=360}
168   	int3	# ShouldNotReachHere
168
16d   B28: #	N266 &lt;- B17 B7  Freq: 2.99394e-06
16d   	movl    RSI, #-28	# int
172   	movl    [rsp + #0], RBX	# spill
175   	movq    [rsp + #16], R14	# spill
17a   	movl    [rsp + #24], R13	# spill
17f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::indexOf @ bci:47  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=RBP L[4]=rsp + #16 L[5]=rsp + #24 STK[0]=rsp + #16 STK[1]=rsp + #24
        # OopMap{[16]=Oop off=388}
184   	int3	# ShouldNotReachHere
184
189   B29: #	N266 &lt;- B2  Freq: 9.99e-07
189   	movl    RSI, #-99	# int
18e   	movl    [rsp + #0], RBX	# spill
191   	movq    [rsp + #8], R14	# spill
196   	movl    [rsp + #4], R13	# spill
19b   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # java.lang.String::indexOf @ bci:37  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=RBP L[4]=rsp + #8 L[5]=rsp + #4
        # OopMap{[8]=Oop off=416}
1a0   	int3	# ShouldNotReachHere
1a0

</opto_assembly>
<writer thread='20227'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='20739'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='4'>
{method} 
 - klass: {other class}
 - this oop:          0x00000006fae06d58
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00000006fae02da0 constant pool [666] for &apos;java/lang/String&apos; cache=0x00000006faebf920
 - access:            0x81000001  public 
 - name:              &apos;charAt&apos;
 - signature:         &apos;(I)C&apos;
 - max stack:         5
 - max locals:        2
 - size of params:    2
 - method size:       16
 - vtable index:      -2
 - i2i entry:         0x0000000103a96780
 - adapters:          AHE@0x00007fda94878828: 0xba000000 i2c: 0x0000000103b4e220 c2i: 0x0000000103b4e337 c2iUV: 0x0000000103b4e30a
 - compiled entry     0x0000000103b4e337
 - code size:         29
 - code start:        0x00000006fae06d18
 - code end (excl):   0x00000006fae06d35
 - method data:       0x00000006fafbaf30
 - checked ex length: 0
 - linenumber start:  0x00000006fae06d35
 - localvar length:   2
 - localvar start:    0x00000006fae06d3e
#
#  char ( java/lang/String:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N70: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_heap_oop_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B7 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	testl   RDX, RDX
02e   	jl,s   B7  P=0.000000 C=95716.000000
02e
030   B2: #	B8 B3 &lt;- B1  Freq: 1
030   	movl    RBP, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
033   	movl    R10, [R12 + RBP &lt;&lt; 3 + #12] (compressed oop addressing)	# range
038   	NullCheck RBP
038
038   B3: #	B7 B4 &lt;- B2  Freq: 0.999999
038   	cmpl    RDX, R10
03b   	jge,s   B7  P=0.000000 C=95716.000000
03b
03d   B4: #	B6 B5 &lt;- B3  Freq: 0.999998
03d   	cmpl    RDX, R10	# unsigned
040   	jnb,us  B6  P=0.000001 C=-1.000000
040
042   B5: #	N70 &lt;- B4  Freq: 0.999997
042   	decode_heap_oop_not_null R10,RBP
046   	movzwl  RAX, [R10 + #16 + RDX &lt;&lt; #1]	# ushort/char
04c   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

057   	ret
057
058   B6: #	N70 &lt;- B4  Freq: 1.01328e-06
058   	movl    RSI, #-28	# int
05d   	movl    [rsp + #0], RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
063   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:27  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0
        # OopMap{rbp=NarrowOop off=104}
068   	int3	# ShouldNotReachHere
068
06d   B7: #	N70 &lt;- B3 B1  Freq: 9.76836e-07
06d   	movl    RSI, #6	# int
072   	movl    RBP, RDX	# spill
      	nop 	# 3 bytes pad for loops and calls
077   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;6&apos;)
        # java.lang.String::charAt @ bci:13  L[0]=_ L[1]=RBP
        # OopMap{off=124}
07c   	int3	# ShouldNotReachHere
07c
081   B8: #	N70 &lt;- B2  Freq: 1.01328e-06
081   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
087   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:9  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=140}
08c   	int3	# ShouldNotReachHere
08c

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='5'>
{method} 
 - klass: {other class}
 - this oop:          0x00000006fae08b28
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00000006fae02da0 constant pool [666] for &apos;java/lang/String&apos; cache=0x00000006faebf920
 - access:            0xc1000001  public 
 - name:              &apos;indexOf&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         5
 - max locals:        6
 - size of params:    3
 - method size:       16
 - vtable index:      -2
 - i2i entry:         0x0000000103a96780
 - adapters:          AHE@0x00007fda94878d50: 0xbaa00000 i2c: 0x0000000103b566a0 c2i: 0x0000000103b567e0 c2iUV: 0x0000000103b567b3
 - compiled entry     0x0000000103b567e0
 - code size:         70
 - code start:        0x00000006fae08a80
 - code end (excl):   0x00000006fae08ac6
 - method data:       0x00000006fb05d5e0
 - checked ex length: 0
 - linenumber start:  0x00000006fae08ac6
 - localvar length:   6
 - localvar start:    0x00000006fae08ade
#
#  int ( java/lang/String:NotNull:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N306: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_heap_oop_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B37 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c   	movl    R8, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
030   	movl    RBP, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
035   	NullCheck R8
035
035   B2: #	B34 B3 &lt;- B1  Freq: 0.999999
035   	movl    RAX, #-1	# int
03a   	testl   RCX, RCX
03c   	jl     B34  P=0.000000 C=375.000000
03c
042   B3: #	B24 B4 &lt;- B2  Freq: 0.999999
042   	cmpl    RCX, RBP
044   	jge     B24  P=0.200000 C=375.000000
044
04a   B4: #	B35 B5 &lt;- B3 B34  Freq: 0.799999
04a   	cmpl    RDX, #65536
050   	jge     B35  P=0.000000 C=300.000000
050
056   B5: #	B24 B6 &lt;- B4  Freq: 0.799999
056   	cmpl    RCX, RBP
058   	jge     B24  P=0.013700 C=21679.000000
058
05e   B6: #	B33 B7 &lt;- B5  Freq: 0.789039
05e   	cmpl    RCX, RBP	# unsigned
060   	jnb,u  B33  P=0.000001 C=-1.000000
060
066   B7: #	B33 B8 &lt;- B6  Freq: 0.789038
066   	movl    R10, RBP	# spill
069   	decl    R10	# int
06c   	cmpl    R10, RBP	# unsigned
06f   	jnb,u  B33  P=0.000001 C=-1.000000
06f
075   B8: #	B9 &lt;- B7  Freq: 0.789037
075   	decode_heap_oop_not_null R9,R8
079   	movl    R11, RCX	# spill
07c   	incl    R11	# int
07f
07f   B9: #	B31 B10 &lt;- B8 B10 	Loop: B9-B10 inner pre of N196 Freq: 1.57807
07f   	movzwl  R8, [R9 + #16 + RCX &lt;&lt; #1]	# ushort/char
085   	cmpl    R8, RDX
088   	je     B31  P=0.000000 C=21382.000000
088
08e   B10: #	B9 B11 &lt;- B9  Freq: 1.57807
08e   	incl    RCX	# int
090   	cmpl    RCX, R11
093   	jl,s   B9	# loop end  P=0.500000 C=21382.000000
093
095   B11: #	B21 B12 &lt;- B10  Freq: 0.789037
095   	movl    R11, RBP	# spill
098   	addl    R11, #-7	# int
09c   	movl    R8, #-2147483648	# int
0a2   	cmpl    R10, R11
0a5   	cmovll R11, R8	# signed, int
0a9   	cmpl    RCX, R11
0ac   	jge,s   B21  P=0.000001 C=-1.000000
      	nop 	# 2 bytes pad for loops and calls

0b0   B12: #	B31 B13 &lt;- B11 B20 	Loop: B12-B20 inner main of N119 Freq: 57.5785
0b0   	movzwl  R10, [R9 + #16 + RCX &lt;&lt; #1]	# ushort/char
0b6   	cmpl    R10, RDX
0b9   	je     B31  P=0.000000 C=21382.000000
0b9
0bf   B13: #	B28 B14 &lt;- B12  Freq: 57.5785
0bf   	movslq  R10, RCX	# i2l
0c2   	movzwl  RBX, [R9 + #18 + R10 &lt;&lt; #1]	# ushort/char
0c8   	cmpl    RBX, RDX
0ca   	je,s   B28  P=0.000000 C=21382.000000
0ca
0cc   B14: #	B30 B15 &lt;- B13  Freq: 57.5785
0cc   	movzwl  RBX, [R9 + #20 + R10 &lt;&lt; #1]	# ushort/char
0d2   	cmpl    RBX, RDX
0d4   	je,s   B30  P=0.000000 C=21382.000000
0d4
0d6   B15: #	B26 B16 &lt;- B14  Freq: 57.5784
0d6   	movzwl  RBX, [R9 + #22 + R10 &lt;&lt; #1]	# ushort/char
0dc   	cmpl    RBX, RDX
0de   	je,s   B26  P=0.000000 C=21382.000000
0de
0e0   B16: #	B32 B17 &lt;- B15  Freq: 57.5784
0e0   	movzwl  RBX, [R9 + #24 + R10 &lt;&lt; #1]	# ushort/char
0e6   	cmpl    RBX, RDX
0e8   	je,s   B32  P=0.000000 C=21382.000000
0e8
0ea   B17: #	B27 B18 &lt;- B16  Freq: 57.5784
0ea   	movzwl  RBX, [R9 + #26 + R10 &lt;&lt; #1]	# ushort/char
0f0   	cmpl    RBX, RDX
0f2   	je,s   B27  P=0.000000 C=21382.000000
0f2
0f4   B18: #	B29 B19 &lt;- B17  Freq: 57.5784
0f4   	movzwl  RBX, [R9 + #28 + R10 &lt;&lt; #1]	# ushort/char
0fa   	cmpl    RBX, RDX
0fc   	je,s   B29  P=0.000000 C=21382.000000
0fc
0fe   B19: #	B25 B20 &lt;- B18  Freq: 57.5783
0fe   	movzwl  R8, [R9 + #30 + R10 &lt;&lt; #1]	# ushort/char
104   	cmpl    R8, RDX
107   	je,s   B25  P=0.000000 C=21382.000000
107
109   B20: #	B12 B21 &lt;- B19  Freq: 57.5783
109   	addl    RCX, #8	# int
10c   	cmpl    RCX, R11
10f   	jl,s   B12	# loop end  P=0.986300 C=21382.000000
10f
111   B21: #	B24 B22 &lt;- B11 B20  Freq: 0.788817
111   	cmpl    RCX, RBP
113   	jge,s   B24  P=0.500000 C=-1.000000
      	nop 	# 3 bytes pad for loops and calls

118   B22: #	B31 B23 &lt;- B21 B23 	Loop: B22-B23 inner post of N196 Freq: 0.788817
118   	movzwl  R11, [R9 + #16 + RCX &lt;&lt; #1]	# ushort/char
11e   	cmpl    R11, RDX
121   	je,s   B31  P=0.000000 C=21382.000000
121
123   B23: #	B22 B24 &lt;- B22  Freq: 0.788816
123   	incl    RCX	# int
125   	cmpl    RCX, RBP
127   	jl,s   B22	# loop end  P=0.500000 C=21382.000000
127
129   B24: #	N306 &lt;- B3 B31 B21 B5 B23 B36  Freq: 0.999997
129   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

134   	ret
134
135   B25: #	B26 &lt;- B19  Freq: 2.74555e-05
135   	addl    RCX, #4	# int
138
138   B26: #	B28 &lt;- B15 B25  Freq: 5.4911e-05
138   	addl    RCX, #2	# int
13b   	jmp,s   B28
13b
13d   B27: #	B28 &lt;- B17  Freq: 2.74555e-05
13d   	addl    RCX, #4	# int
140
140   B28: #	B31 &lt;- B13 B27 B26  Freq: 0.000109822
140   	incl    RCX	# int
142   	jmp,s   B31
142
144   B29: #	B30 &lt;- B18  Freq: 2.74555e-05
144   	addl    RCX, #4	# int
147
147   B30: #	B31 &lt;- B14 B29  Freq: 5.4911e-05
147   	addl    RCX, #2	# int
14a
14a   B31: #	B24 &lt;- B22 B9 B12 B32 B30 B28  Freq: 0.000220773
14a   	movl    RAX, RCX	# spill
14c   	jmp,s   B24
14c
14e   B32: #	B31 &lt;- B16  Freq: 2.74555e-05
14e   	addl    RCX, #4	# int
151   	jmp,s   B31
151
153   B33: #	N306 &lt;- B7 B6  Freq: 1.59903e-06
153   	movl    RSI, #-122	# int
158   	movl    [rsp + #0], RDX	# spill
15b   	movl    [rsp + #4], RCX	# spill
15f   	movl    [rsp + #8], R8	# spill
      	nop 	# 3 bytes pad for loops and calls
167   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:43  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=RBP L[4]=rsp + #8 L[5]=rsp + #4
        # OopMap{[8]=NarrowOop off=364}
16c   	int3	# ShouldNotReachHere
16c
171   B34: #	B4 &lt;- B2  Freq: 4.76837e-07
171   	xorl    RCX, RCX	# int
173   	jmp     B4
173
178   B35: #	B38 B36 &lt;- B4  Freq: 3.81469e-07
      	nop 	# 3 bytes pad for loops and calls
17b   	call,static  java.lang.String::indexOfSupplementary
        # java.lang.String::indexOf @ bci:66  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # OopMap{off=384}
180
180   B36: #	B24 &lt;- B35  Freq: 3.81462e-07
        # Block is sole successor of call
180   	jmp,s   B24
180
182   B37: #	N306 &lt;- B1  Freq: 1.01328e-06
182   	movl    RSI, #-10	# int
187   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap{off=396}
18c   	int3	# ShouldNotReachHere
18c
191   B38: #	N306 &lt;- B35  Freq: 3.81469e-12
191   	# exception oop is in rax; no code emitted
191   	movq    RSI, RAX	# spill
194   	addq    rsp, 32	# Destroy frame
	popq   rbp

199   	jmp     rethrow_stub
199

</opto_assembly>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='20227'/>
<opto_assembly compile_id='3'>
{method} 
 - klass: {other class}
 - this oop:          0x00000006faffe120
 - method holder:     &apos;sun/nio/cs/UTF_8$Encoder&apos;
 - constants:         0x00000006faffc7d0 constant pool [192] for &apos;sun/nio/cs/UTF_8$Encoder&apos; cache=0x00000006faffe5b0
 - access:            0xc1000001  public 
 - name:              &apos;encode&apos;
 - signature:         &apos;([CII[B)I&apos;
 - max stack:         7
 - max locals:        10
 - size of params:    5
 - method size:       16
 - vtable index:      18
 - i2i entry:         0x0000000103a96780
 - adapters:          AHE@0x00007fda948790c0: 0xbbaab000 i2c: 0x0000000103b587e0 c2i: 0x0000000103b58929 c2iUV: 0x0000000103b588fc
 - compiled entry     0x0000000103b58929
 - code size:         361
 - code start:        0x00000006faffdf18
 - code end (excl):   0x00000006faffe081
 - method data:       0x00000006fb05d778
 - checked ex length: 0
 - linenumber start:  0x00000006faffe081
 - localvar length:   10
 - localvar start:    0x00000006faffe0a6
#
#  int ( sun/nio/cs/UTF_8$Encoder:NotNull *, char[int:&gt;=0]:exact *, int, int, byte[int:&gt;=0]:exact * )
#
#r018 rsi:rsi   : parm 0: sun/nio/cs/UTF_8$Encoder:NotNull *
#r016 rdx:rdx   : parm 1: char[int:&gt;=0]:exact *
#r010 rcx   : parm 2: int
#r004 r8   : parm 3: int
#r006 r9:r9   : parm 4: byte[int:&gt;=0]:exact *
# -- Old rsp -- Framesize: 112 --
#r191 rsp+108: in_preserve
#r190 rsp+104: return address
#r189 rsp+100: in_preserve
#r188 rsp+96: saved fp register
#r187 rsp+92: pad2, stack alignment
#r186 rsp+88: pad2, stack alignment
#r185 rsp+84: Fixed slot 1
#r184 rsp+80: Fixed slot 0
#r211 rsp+76: spill
#r210 rsp+72: spill
#r209 rsp+68: spill
#r208 rsp+64: spill
#r207 rsp+60: spill
#r206 rsp+56: spill
#r205 rsp+52: spill
#r204 rsp+48: spill
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N764: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_heap_oop_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B65 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

02c   	movq    [rsp + #40], RSI	# spill
031   	movl    RSI, [R9 + #12 (8-bit)]	# range
035   	NullCheck R9
035
035   B2: #	B27 B3 &lt;- B1  Freq: 0.999999
035   	cmpl    R8, RSI
038   	movl    RBX, RSI	# spill
03a   	cmovll RBX, R8	# signed, int
03e   	movl    R14, RCX	# spill
041   	addl    R14, R8	# int
044   	testl   RBX, RBX
046   	jle     B27  P=0.018064 C=9245.000000
046
04c   B3: #	B35 B4 &lt;- B2  Freq: 0.981935
04c   	movq    R11, RDX	# spill
04f   	movl    R8, [RDX + #12 (8-bit)]	# range
053   	NullCheck RDX
053
053   B4: #	B35 B5 &lt;- B3  Freq: 0.981934
053   	cmpl    RCX, R8	# unsigned
056   	jnb,u  B35  P=0.000001 C=-1.000000
056
05c   B5: #	B35 B6 &lt;- B4  Freq: 0.981933
05c   	movl    RDI, RCX	# spill
05e   	addl    RDI, RBX	# int
060   	decl    RDI	# int
062   	cmpl    RDI, R8	# unsigned
065   	jnb,u  B35  P=0.000001 C=-1.000000
065
06b   B6: #	B7 &lt;- B5  Freq: 0.981932
06b   	movl    RDI, #1	# int
070   	cmpl    RBX, RDI
072   	movl    R10, RBX	# spill
075   	cmovlgt R10, RDI	# min
079   	xorl    RBP, RBP	# int
07b
07b   B7: #	B37 B8 &lt;- B6 B10 	Loop: B7-B10 inner pre of N569 Freq: 1.96386
07b   	movl    R8, RBP	# spill
07e   	addl    R8, RCX	# int
081   	movzwl  RDX, [R11 + #16 + R8 &lt;&lt; #1]	# ushort/char
087   	cmpl    RDX, #128
08d   	jge     B37  P=0.000000 C=9078.000000
08d
093   B8: #	B32 B9 &lt;- B7  Freq: 1.96386
093   	movl    RDI, RBP	# spill
095   	incl    RDI	# int
097   	cmpl    RBP, RSI	# unsigned
099   	jnb,u  B32  P=0.000001 C=-1.000000
099
09f   B9: #	B11 B10 &lt;- B8  Freq: 1.96386
09f   	movslq  RAX, RBP	# i2l
0a2   	movb    [R9 + #16 + RAX], RDX	# byte
0a7   	cmpl    RDI, R10
0aa   	jge,s   B11	# loop end  P=0.500000 C=9078.000000
0aa
0ac   B10: #	B7 &lt;- B9  Freq: 0.981929
0ac   	movl    RBP, RDI	# spill
0ae   	jmp,s   B7
0ae
0b0   B11: #	B36 B12 &lt;- B9  Freq: 0.981929
0b0   	cmpl    RSI, RBX
0b2   	movl    RAX, RSI	# spill
0b4   	cmovlgt RAX, RBX	# min
0b7   	movl    RDX, RAX	# spill
0b9   	addl    RDX, #-3	# int
0bc   	movl    R10, #-2147483648	# int
0c2   	cmpl    RAX, RDX
0c4   	cmovll RDX, R10	# signed, int
0c8   	cmpl    RDI, RDX
0ca   	jge     B36  P=0.000001 C=-1.000000
0ca
0d0   B12: #	B31 B13 &lt;- B11 B16 	Loop: B12-B16 inner main of N151 Freq: 54.3531
0d0   	movl    R8, RDI	# spill
0d3   	addl    R8, RCX	# int
0d6   	movzwl  R10, [R11 + #16 + R8 &lt;&lt; #1]	# ushort/char
0dc   	cmpl    R10, #128
0e3   	jge     B31  P=0.000000 C=9078.000000
0e3
0e9   B13: #	B29 B14 &lt;- B12  Freq: 54.3531
0e9   	movslq  RAX, R8	# i2l
0ec   	movzwl  RBP, [R11 + #18 + RAX &lt;&lt; #1]	# ushort/char
0f2   	movslq  R13, RDI	# i2l
0f5   	movb    [R9 + #16 + R13], R10	# byte
0fa   	cmpl    RBP, #128
100   	jge     B29  P=0.000000 C=9078.000000
100
106   B14: #	B30 B15 &lt;- B13  Freq: 54.3531
106   	movzwl  R10, [R11 + #20 + RAX &lt;&lt; #1]	# ushort/char
10c   	movslq  R13, RDI	# i2l
10f   	movb    [R9 + #17 + R13], RBP	# byte
114   	cmpl    R10, #128
11b   	jge     B30  P=0.000000 C=9078.000000
11b
121   B15: #	B28 B16 &lt;- B14  Freq: 54.3531
121   	movb    [R9 + #18 + R13], R10	# byte
126   	movzwl  R10, [R11 + #22 + RAX &lt;&lt; #1]	# ushort/char
12c   	cmpl    R10, #128
133   	jge,s   B28  P=0.000000 C=9078.000000
133
135   B16: #	B12 B17 &lt;- B15  Freq: 54.353
135   	movb    [R9 + #19 + R13], R10	# byte
13a   	addl    RDI, #4	# int
13d   	cmpl    RDI, RDX
13f   	jl,s   B12	# loop end  P=0.981936 C=9078.000000
13f
141   B17: #	B18 &lt;- B16  Freq: 0.981825
141   	addl    R8, #4	# int
145
145   B18: #	B21 B19 &lt;- B36 B17  Freq: 0.981826
145   	cmpl    RDI, RBX
147   	jl,s   B21  P=0.500000 C=-1.000000
147
149   B19: #	B25 &lt;- B18  Freq: 0.490913
149   	movl    R10, RDI	# spill
14c   	jmp,s   B25
14c
14e   B20: #	B21 &lt;- B23  Freq: 0.490911
14e   	movl    RDI, R10	# spill
14e
151   B21: #	B31 B22 &lt;- B18 B20 	Loop: B21-B20 inner post of N569 Freq: 0.981824
151   	movl    R8, RDI	# spill
154   	addl    R8, RCX	# int
157   	movzwl  RDX, [R11 + #16 + R8 &lt;&lt; #1]	# ushort/char
15d   	cmpl    RDX, #128
163   	jge,s   B31  P=0.000000 C=9078.000000
163
165   B22: #	B33 B23 &lt;- B21  Freq: 0.981824
165   	movl    R10, RDI	# spill
168   	incl    R10	# int
16b   	cmpl    RDI, RSI	# unsigned
16d   	jnb,us  B33  P=0.000001 C=-1.000000
16d
16f   B23: #	B20 B24 &lt;- B22  Freq: 0.981823
16f   	movslq  RDI, RDI	# i2l
172   	movb    [R9 + #16 + RDI], RDX	# byte
177   	cmpl    R10, RBX
17a   	jl,s   B20	# loop end  P=0.500000 C=9078.000000
17a
17c   B24: #	B25 &lt;- B23  Freq: 0.490911
17c   	incl    R8	# int
17f
17f   B25: #	B38 B26 &lt;- B24 B19 B31 B27  Freq: 0.999993
17f   	cmpl    R8, R14
182   	jl     B38  P=0.000000 C=167.000000
182
188   B26: #	N764 &lt;- B45 B25  Freq: 0.999993
188   	movl    RAX, R10	# spill
18b   	addq    rsp, 96	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

196   	ret
196
197   B27: #	B25 &lt;- B2  Freq: 0.0180638
197   	xorl    R10, R10	# int
19a   	movq    R11, RDX	# spill
19d   	movl    R8, RCX	# spill
1a0   	jmp,s   B25
1a0
1a2   B28: #	B29 &lt;- B15  Freq: 2.59176e-05
1a2   	addl    RDI, #2	# int
1a5   	addl    R8, #2	# int
1a9
1a9   B29: #	B31 &lt;- B13 B28  Freq: 5.18351e-05
1a9   	incl    R8	# int
1ac   	incl    RDI	# int
1ae   	jmp,s   B31
1ae
1b0   B30: #	B31 &lt;- B14  Freq: 2.59176e-05
1b0   	addl    R8, #2	# int
1b4   	addl    RDI, #2	# int
1b7
1b7   B31: #	B25 &lt;- B21 B37 B12 B30 B29  Freq: 0.000105075
1b7   	movl    R10, RDI	# spill
1ba   	jmp,s   B25
1ba
1bc   B32: #	B34 &lt;- B8  Freq: 1.98994e-06
1bc   	incl    R8	# int
1bf   	movl    [rsp + #0], RDI	# spill
1c2   	movl    RDI, RBP	# spill
1c4   	jmp,s   B34
1c4
1c6   B33: #	B34 &lt;- B22  Freq: 9.94861e-07
1c6   	incl    R8	# int
1c9   	movl    [rsp + #0], R10	# spill
1c9
1cd   B34: #	N764 &lt;- B33 B32  Freq: 2.9848e-06
1cd   	movsbl  RBP, RDX	# i2b
1d0   	movl    RSI, #-28	# int
1d5   	movq    [rsp + #8], R11	# spill
1da   	movl    [rsp + #4], R8	# spill
1df   	movq    [rsp + #24], R9	# spill
1e4   	movl    [rsp + #32], RDI	# spill
1e8   	movl    [rsp + #36], R14	# spill
1ed   	movl    [rsp + #48], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
1f3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encode @ bci:50  L[0]=rsp + #40 L[1]=rsp + #8 L[2]=rsp + #4 L[3]=_ L[4]=rsp + #24 L[5]=rsp + #36 L[6]=rsp + #0 L[7]=rsp + #48 L[8]=_ L[9]=_ STK[0]=rsp + #24 STK[1]=rsp + #32 STK[2]=RBP
        # OopMap{[8]=Oop [24]=Oop [40]=Oop off=504}
1f8   	int3	# ShouldNotReachHere
1f8
1fd   B35: #	N764 &lt;- B5 B3 B4  Freq: 2.98492e-06
1fd   	movl    RSI, #-122	# int
202   	movq    RBP, RDX	# spill
205   	movl    [rsp + #0], RCX	# spill
208   	movq    [rsp + #8], R9	# spill
20d   	movl    [rsp + #4], R14	# spill
212   	movl    [rsp + #16], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
217   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # sun.nio.cs.UTF_8$Encoder::encode @ bci:27  L[0]=rsp + #40 L[1]=RBP L[2]=rsp + #0 L[3]=_ L[4]=rsp + #8 L[5]=rsp + #4 L[6]=#0 L[7]=rsp + #16 L[8]=_ L[9]=_
        # OopMap{rbp=Oop [8]=Oop [40]=Oop off=540}
21c   	int3	# ShouldNotReachHere
21c
221   B36: #	B18 &lt;- B11  Freq: 9.94968e-07
221   	incl    R8	# int
224   	jmp     B18
224
229   B37: #	B31 &lt;- B7  Freq: 9.36442e-07
229   	movl    RDI, RBP	# spill
22b   	jmp,s   B31
22b
22d   B38: #	B58 B39 &lt;- B25  Freq: 4.76834e-07
22d   	movl    RBX, [R11 + #12 (8-bit)]	# range
231   	NullCheck R11
231
231   B39: #	B58 B40 &lt;- B38  Freq: 4.76833e-07
231   	cmpl    R8, RBX	# unsigned
234   	jnb,u  B58  P=0.000001 C=-1.000000
234
23a   B40: #	B58 B41 &lt;- B39  Freq: 4.76833e-07
23a   	movl    RDI, R14	# spill
23d   	decl    RDI	# int
23f   	cmpl    RDI, RBX	# unsigned
241   	jnb,u  B58  P=0.000001 C=-1.000000
241
247   B41: #	B42 &lt;- B40  Freq: 4.76832e-07
247   	movl    [rsp + #64], R10	# spill
247
24c   B42: #	B47 B43 &lt;- B41 B46 	Loop: B42-B46 inner  Freq: 4.76834e-07
24c   	movzwl  RDI, [R11 + #16 + R8 &lt;&lt; #1]	# ushort/char
252   	incl    R8	# int
255   	movl    R10, [rsp + #64]	# spill
25a   	incl    R10	# int
25d   	movslq  RAX, [RSP + #64 (32-bit)]	# int -&gt; long
262   	cmpl    RDI, #128
268   	jge,s   B47  P=0.500000 C=-1.000000
268
26a   B43: #	B59 B44 &lt;- B42  Freq: 2.38417e-07
26a   	movl    RBX, [rsp + #64]	# spill
26e   	cmpl    RBX, RSI	# unsigned
270   	jnb,u  B59  P=0.000001 C=-1.000000
270
276   B44: #	B45 &lt;- B43  Freq: 2.38417e-07
276   	movb    [R9 + #16 + RAX], RDI	# byte
276
27b   B45: #	B26 B46 &lt;- B57 B54 B44  Freq: 3.69545e-07
27b   	cmpl    R8, R14
27e   	jge     B26	# loop end  P=1.000000 C=167.000000
27e
284   B46: #	B42 &lt;- B45  Freq: 1.76213e-13
284   	movl    [rsp + #64], R10	# spill
289   	jmp,s   B42
289
28b   B47: #	B52 B48 &lt;- B42  Freq: 2.38417e-07
28b   	movl    RBP, RDI	# spill
28d   	andl    RBP, #63	# int
290   	movslq  R13, [RSP + #64 (32-bit)]	# int -&gt; long
295   	orl     RBP, #128	# int
29b   	movl    RBX, [rsp + #64]	# spill
29f   	addl    RBX, #2	# int
2a2   	cmpl    RDI, #2048
2a8   	jl,s   B52  P=0.500000 C=-1.000000
2a8
2aa   B48: #	B66 B49 &lt;- B47  Freq: 1.19208e-07
2aa   	movl    [rsp + #52], RBX	# spill
2ae   	movq    [rsp + #56], R13	# spill
2b3   	movl    [rsp + #48], RBP	# spill
2b7   	movq    [rsp + #24], RAX	# spill
2bc   	movl    [rsp + #36], RDI	# spill
2c0   	movl    [rsp + #8], R8	# spill
2c5   	movl    [rsp + #12], R10	# spill
2ca   	movl    [rsp + #32], R14	# spill
2cf   	movl    RBP, RSI	# spill
2d1   	movq    [rsp + #0], R11	# spill
2d5   	movq    [rsp + #16], R9	# spill
2da   	movl    RSI, RDI	# spill
      	nop 	# 3 bytes pad for loops and calls
2df   	call,static  java.lang.Character::isSurrogate
        # sun.nio.cs.UTF_8$Encoder::encode @ bci:139  L[0]=rsp + #40 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=rsp + #32 L[6]=rsp + #64 L[7]=_ L[8]=rsp + #36 L[9]=_
        # OopMap{[0]=Oop [16]=Oop [40]=Oop off=740}
2e4
2e4   B49: #	B55 B50 &lt;- B48  Freq: 1.19206e-07
        # Block is sole successor of call
2e4   	testl   RAX, RAX
2e6   	je,s   B55  P=0.100000 C=-1.000000
2e6
2e8   B50: #	B62 B51 &lt;- B49  Freq: 1.07285e-07
2e8   	movq    R10, [rsp + #40]	# spill
2ed   	movl    RBP, [R10 + #44 (8-bit)]	# compressed ptr ! Field: sun/nio/cs/UTF_8$Encoder.sgp
2f1   	testl   RBP, RBP	# compressed ptr
2f3   	je     B62  P=0.000001 C=-1.000000
2f3
2f9   B51: #	N764 &lt;- B50  Freq: 1.07285e-07
2f9   	movl    RSI, #-20	# int
      	nop 	# 1 bytes pad for loops and calls
2ff   	call,static  wrapper for: uncommon_trap(reason=&apos;null_assert&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encode @ bci:149  L[0]=rsp + #40 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=rsp + #32 L[6]=rsp + #64 L[7]=_ L[8]=rsp + #36 L[9]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [0]=Oop [16]=Oop [40]=Oop off=772}
304   	int3	# ShouldNotReachHere
304
309   B52: #	B60 B53 &lt;- B47  Freq: 1.19208e-07
309   	movl    RDX, RDI	# spill
30b   	sarl    RDX, #6
30e   	orl     RDX, #192	# int
314   	movl    RCX, [rsp + #64]	# spill
318   	cmpl    RCX, RSI	# unsigned
31a   	jnb,u  B60  P=0.000001 C=-1.000000
31a
320   B53: #	B61 B54 &lt;- B52  Freq: 1.19208e-07
320   	movb    [R9 + #16 + RAX], RDX	# byte
325   	cmpl    R10, RSI	# unsigned
328   	jnb,u  B61  P=0.000001 C=-1.000000
328
32e   B54: #	B45 &lt;- B53  Freq: 1.19208e-07
32e   	movb    [R9 + #17 + R13], RBP	# byte
333   	movl    R10, RBX	# spill
336   	jmp     B45
336
33b   B55: #	B63 B56 &lt;- B49  Freq: 1.19206e-08
33b   	movl    R11, [rsp + #36]	# spill
340   	sarl    R11, #12
344   	orl     R11, #224	# int
34b   	movl    RCX, [rsp + #64]	# spill
34f   	cmpl    RCX, RBP	# unsigned
351   	jnb,u  B63  P=0.000001 C=-1.000000
351
357   B56: #	B64 B57 &lt;- B55  Freq: 1.19206e-08
357   	movq    R9, [rsp + #16]	# spill
35c   	movq    R10, [rsp + #24]	# spill
361   	movb    [R9 + #16 + R10], R11	# byte
366   	movl    R11, [rsp + #36]	# spill
36b   	shrl    R11, #6
36f   	andl    R11, #63	# int
373   	orl     R11, #128	# int
37a   	movl    R10, [rsp + #52]	# spill
37f   	cmpl    R10, RBP	# unsigned
382   	jnb,u  B64  P=0.000001 C=-1.000000
382
388   B57: #	B45 &lt;- B56  Freq: 1.19206e-08
388   	movq    R10, [rsp + #56]	# spill
38d   	movb    [R9 + #17 + R10], R11	# byte
392   	movl    R8, [rsp + #48]	# spill
397   	movb    [R9 + #18 + R10], R8	# byte
39c   	movl    R10, [rsp + #64]	# spill
3a1   	addl    R10, #3	# int
3a5   	movq    R11, [rsp + #0]	# spill
3a9   	movl    RSI, RBP	# spill
3ab   	movl    R14, [rsp + #32]	# spill
3b0   	movl    R8, [rsp + #8]	# spill
3b5   	jmp     B45
3b5
3ba   B58: #	N764 &lt;- B40 B38 B39  Freq: 1.4495e-12
3ba   	movl    RSI, #-122	# int
3bf   	movq    RBP, R11	# spill
3c2   	movl    [rsp + #0], R8	# spill
3c6   	movq    [rsp + #8], R9	# spill
3cb   	movl    [rsp + #4], R10	# spill
3d0   	movl    [rsp + #16], R14	# spill
      	nop 	# 2 bytes pad for loops and calls
3d7   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # sun.nio.cs.UTF_8$Encoder::encode @ bci:60  L[0]=rsp + #40 L[1]=RBP L[2]=rsp + #0 L[3]=_ L[4]=rsp + #8 L[5]=rsp + #16 L[6]=rsp + #4 L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [8]=Oop [40]=Oop off=988}
3dc   	int3	# ShouldNotReachHere
3dc
3e1   B59: #	N764 &lt;- B43  Freq: 2.41583e-13
3e1   	movsbl  RBP, RDI	# i2b
3e5   	movl    RSI, #-28	# int
3ea   	movq    [rsp + #0], R11	# spill
3ee   	movl    [rsp + #8], R8	# spill
3f3   	movl    [rsp + #12], R10	# spill
3f8   	movq    [rsp + #24], R9	# spill
3fd   	movl    [rsp + #32], R14	# spill
      	nop 	# 1 bytes pad for loops and calls
403   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encode @ bci:86  L[0]=rsp + #40 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #24 L[5]=rsp + #32 L[6]=rsp + #12 L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #24 STK[1]=rsp + #64 STK[2]=RBP
        # OopMap{[0]=Oop [24]=Oop [40]=Oop off=1032}
408   	int3	# ShouldNotReachHere
408
40d   B60: #	N764 &lt;- B52  Freq: 1.20791e-13
40d   	movsbl  RBP, RDX	# i2b
410   	movl    RSI, #-28	# int
415   	movq    [rsp + #0], R11	# spill
419   	movl    [rsp + #8], R8	# spill
41e   	movl    [rsp + #12], R10	# spill
423   	movq    [rsp + #24], R9	# spill
428   	movl    [rsp + #32], R14	# spill
42d   	movl    [rsp + #36], RDI	# spill
      	nop 	# 2 bytes pad for loops and calls
433   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encode @ bci:115  L[0]=rsp + #40 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #24 L[5]=rsp + #32 L[6]=rsp + #12 L[7]=_ L[8]=rsp + #36 L[9]=_ STK[0]=rsp + #24 STK[1]=rsp + #64 STK[2]=RBP
        # OopMap{[0]=Oop [24]=Oop [40]=Oop off=1080}
438   	int3	# ShouldNotReachHere
438
43d   B61: #	N764 &lt;- B53  Freq: 1.20791e-13
43d   	movsbl  RBP, RBP	# i2b
441   	movl    RSI, #-28	# int
446   	movq    [rsp + #0], R11	# spill
44a   	movl    [rsp + #8], R8	# spill
44f   	movq    [rsp + #24], R9	# spill
454   	movl    [rsp + #12], R10	# spill
459   	movl    [rsp + #32], R14	# spill
45e   	movl    [rsp + #36], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
463   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encode @ bci:133  L[0]=rsp + #40 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #24 L[5]=rsp + #32 L[6]=rsp + #36 L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #24 STK[1]=rsp + #12 STK[2]=RBP
        # OopMap{[0]=Oop [24]=Oop [40]=Oop off=1128}
468   	int3	# ShouldNotReachHere
468
46d   B62: #	N764 &lt;- B50  Freq: 1.0871e-13
46d   	movl    RSI, #21	# int
472   	movq    RBP, [rsp + #0]	# spill
476   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
487   	pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #8]
491   	movq    [rsp + #24], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
497   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;21&apos;)
        # sun.nio.cs.UTF_8$Encoder::encode @ bci:153  L[0]=rsp + #24 L[1]=RBP L[2]=rsp + #0 L[3]=_ L[4]=rsp + #8 L[5]=rsp + #32 L[6]=rsp + #64 L[7]=_ L[8]=rsp + #36 L[9]=_ STK[0]=rsp + #40
        # OopMap{rbp=Oop [8]=Oop [24]=Oop [40]=Oop off=1180}
49c   	int3	# ShouldNotReachHere
49c
4a1   B63: #	N764 &lt;- B55  Freq: 1.20789e-14
4a1   	movsbl  RBP, R11	# i2b
4a5   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
4ab   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encode @ bci:315  L[0]=rsp + #40 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=rsp + #32 L[6]=rsp + #12 L[7]=_ L[8]=rsp + #36 L[9]=_ STK[0]=rsp + #16 STK[1]=rsp + #64 STK[2]=RBP
        # OopMap{[0]=Oop [16]=Oop [40]=Oop off=1200}
4b0   	int3	# ShouldNotReachHere
4b0
4b5   B64: #	N764 &lt;- B56  Freq: 1.20789e-14
4b5   	movsbl  RBP, R11	# i2b
4b9   	movl    RSI, #-28	# int
      	nop 	# 1 bytes pad for loops and calls
4bf   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encode @ bci:336  L[0]=rsp + #40 L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #16 L[5]=rsp + #32 L[6]=rsp + #52 L[7]=_ L[8]=rsp + #36 L[9]=_ STK[0]=rsp + #16 STK[1]=rsp + #12 STK[2]=RBP
        # OopMap{[0]=Oop [16]=Oop [40]=Oop off=1220}
4c4   	int3	# ShouldNotReachHere
4c4
4c9   B65: #	N764 &lt;- B1  Freq: 1.01328e-06
4c9   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
4cf   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.nio.cs.UTF_8$Encoder::encode @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # OopMap{off=1236}
4d4   	int3	# ShouldNotReachHere
4d4
4d9   B66: #	N764 &lt;- B48  Freq: 1.19208e-12
4d9   	# exception oop is in rax; no code emitted
4d9   	movq    RSI, RAX	# spill
4dc   	addq    rsp, 96	# Destroy frame
	popq   rbp

4e1   	jmp     rethrow_stub
4e1

</opto_assembly>
<writer thread='20739'/>
<opto_assembly compile_id='6'>
{method} 
 - klass: {other class}
 - this oop:          0x00000006faff1468
 - method holder:     &apos;java/io/UnixFileSystem&apos;
 - constants:         0x00000006faff0378 constant pool [286] for &apos;java/io/UnixFileSystem&apos; cache=0x00000006faff3558
 - access:            0xc1000001  public 
 - name:              &apos;normalize&apos;
 - signature:         &apos;(Ljava/lang/String;)Ljava/lang/String;&apos;
 - max stack:         7
 - max locals:        6
 - size of params:    2
 - method size:       16
 - vtable index:      14
 - i2i entry:         0x0000000103a96780
 - adapters:          AHE@0x00007fda94878720: 0xbb000000 i2c: 0x0000000103b46320 c2i: 0x0000000103b46438 c2iUV: 0x0000000103b4640b
 - compiled entry     0x0000000103b46438
 - code size:         75
 - code start:        0x00000006faff13c0
 - code end (excl):   0x00000006faff140b
 - method data:       0x00000006fb0819e8
 - checked ex length: 0
 - linenumber start:  0x00000006faff140b
 - localvar length:   6
 - localvar start:    0x00000006faff141e
#
#  java/lang/String:exact * ( java/io/UnixFileSystem:NotNull *, java/lang/String:exact * )
#
#r018 rsi:rsi   : parm 0: java/io/UnixFileSystem:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/String:exact *
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N458: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_heap_oop_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B51 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c   	movq    [rsp + #8], RSI	# spill
031   	movl    R8, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value
035   	NullCheck RDX
035
035   B2: #	B52 B3 &lt;- B1  Freq: 0.999999
035   	movl    R10, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
03a   	NullCheck R8
03a
03a   B3: #	B15 B4 &lt;- B2  Freq: 0.999998
03a   	testl   R10, R10
03d   	jle     B15  P=0.014321 C=6843.000000
03d
043   B4: #	B45 B5 &lt;- B3  Freq: 0.985677
043   	testl  R10, R10	# unsigned
046   	jbe,u  B45  P=0.000001 C=-1.000000
046
04c   B5: #	B45 B6 &lt;- B4  Freq: 0.985676
04c   	movl    R11, R10	# spill
04f   	decl    R11	# int
052   	cmpl    R11, R10	# unsigned
055   	jnb,u  B45  P=0.000001 C=-1.000000
055
05b   B6: #	B7 &lt;- B5  Freq: 0.985675
05b   	decode_heap_oop_not_null RCX,R8
05f   	xorl    R8, R8	# int
062   	movl    R9, #1	# int
068   	cmpl    R10, R9
06b   	movl    RDI, R10	# spill
06e   	cmovlgt RDI, R9	# min
072   	xorl    RBX, RBX	# int
074
074   B7: #	B46 B8 &lt;- B6 B11 	Loop: B7-B11 inner pre of N298 Freq: 1.97135
074   	testl   R8, R8
077   	jl     B46  P=0.000000 C=97776.000000
077
07d   B8: #	B48 B9 &lt;- B7  Freq: 1.97135
07d   	cmpl    R8, R10
080   	jge     B48  P=0.000000 C=97776.000000
080
086   B9: #	B41 B10 &lt;- B8  Freq: 1.97135
086   	movzwl  R9, [RCX + #16 + R8 &lt;&lt; #1]	# ushort/char
08c   	cmpl    RBX, #47
08f   	je     B41  P=0.105115 C=6745.000000
08f
095   B10: #	B12 B11 &lt;- B41 B9  Freq: 1.97135
095   	incl    R8	# int
098   	cmpl    R8, RDI
09b   	jge,s   B12	# loop end  P=0.500000 C=6745.000000
09b
09d   B11: #	B7 &lt;- B10  Freq: 0.985673
09d   	movl    RBX, R9	# spill
0a0   	jmp,s   B7
0a0
0a2   B12: #	B20 B13 &lt;- B10  Freq: 0.985673
0a2   	movl    RSI, R10	# spill
0a5   	addl    RSI, #-3	# int
0a8   	movl    RBX, #-2147483648	# int
0ad   	cmpl    R10, RSI
0b0   	cmovll RSI, RBX	# signed, int
0b3   	cmpl    R8, RSI
0b6   	jl,s   B20  P=0.999999 C=-1.000000
0b6
0b8   B13: #	B34 B14 &lt;- B12 B19  Freq: 0.985659
0b8   	cmpl    R8, R10
0bb   	jl     B34  P=0.500000 C=-1.000000
0bb
0c1   B14: #	B39 B15 &lt;- B13  Freq: 0.492829
0c1   	cmpl    R9, #47
0c5   	je     B39  P=0.010204 C=98.000000
0c5
0cb   B15: #	B16 &lt;- B14 B3 B38  Freq: 0.989921
0cb   	movq    RAX, RDX	# spill
0cb
0ce   B16: #	N458 &lt;- B30 B40 B15  Freq: 0.999993
0ce   	addq    rsp, 48	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

0d9   	ret
0d9
0da   B17: #	B22 B18 &lt;- B21  Freq: 7.23454
0da   	cmpl    RDI, #47
0dd   	jne,s   B22  P=1.000000 C=709.000000
0dd
0df   B18: #	B26 &lt;- B17  Freq: 3.4497e-06
0df   	jmp,s   B26
0df
0e1   B19: #	B13 B20 &lt;- B24 B23  top-of-loop Freq: 68.8251
0e1   	addl    R8, #4	# int
0e5   	cmpl    R8, RSI
0e8   	jge,s   B13	# loop end  P=0.014321 C=6745.000000
0e8
0ea   B20: #	B31 B21 &lt;- B12 B19 	Loop: B20-B19 inner main of N141 Freq: 68.8251
0ea   	movzwl  RBX, [RCX + #16 + R8 &lt;&lt; #1]	# ushort/char
0f0   	cmpl    R9, #47
0f4   	je,s   B31  P=0.105115 C=6745.000000
0f4
0f6   B21: #	B17 B22 &lt;- B31 B20  Freq: 68.8251
0f6   	movslq  R9, R8	# i2l
0f9   	movzwl  RDI, [RCX + #18 + R9 &lt;&lt; #1]	# ushort/char
0ff   	cmpl    RBX, #47
102   	je,s   B17  P=0.105115 C=6745.000000
102
104   B22: #	B27 B23 &lt;- B17 B21  Freq: 68.8251
104   	movzwl  RBX, [RCX + #20 + R9 &lt;&lt; #1]	# ushort/char
10a   	cmpl    RDI, #47
10d   	je,s   B27  P=0.105115 C=6745.000000
10d
10f   B23: #	B19 B24 &lt;- B27 B22  Freq: 68.8251
10f   	movzwl  R9, [RCX + #22 + R9 &lt;&lt; #1]	# ushort/char
115   	cmpl    RBX, #47
118   	jne,s   B19  P=0.894885 C=6745.000000
118
11a   B24: #	B19 B25 &lt;- B23  Freq: 7.23454
11a   	cmpl    R9, #47
11e   	jne,s   B19  P=1.000000 C=709.000000
11e
120   B25: #	B26 &lt;- B24  Freq: 3.4497e-06
120   	addl    R8, #2	# int
124
124   B26: #	B29 &lt;- B18 B25  Freq: 6.89939e-06
124   	incl    R8	# int
127   	jmp,s   B29
127
129   B27: #	B23 B28 &lt;- B22  Freq: 7.23454
129   	cmpl    RBX, #47
12c   	jne,s   B23  P=1.000000 C=709.000000
12c
12e   B28: #	B29 &lt;- B27  Freq: 3.4497e-06
12e   	addl    R8, #2	# int
132
132   B29: #	B53 B30 &lt;- B44 B42 B32 B28 B26  Freq: 1.3947e-05
132   	decl    R8	# int
135   	movq    RSI, [rsp + #8]	# spill
13a   	movl    RCX, R10	# spill
      	nop 	# 2 bytes pad for loops and calls
13f   	call,static  java.io.UnixFileSystem::normalize
        # java.io.UnixFileSystem::normalize @ bci:44  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # OopMap{off=324}
144
144   B30: #	B16 &lt;- B29  Freq: 1.39467e-05
        # Block is sole successor of call
144   	jmp,s   B16
144
146   B31: #	B21 B32 &lt;- B20  Freq: 7.23454
146   	cmpl    RBX, #47
149   	jne,s   B21  P=1.000000 C=709.000000
149
14b   B32: #	B29 &lt;- B31  Freq: 3.4497e-06
14b   	jmp,s   B29
14b
14d   B33: #	B34 &lt;- B37  Freq: 0.492828
14d   	movl    R9, RDI	# spill
14d
150   B34: #	B47 B35 &lt;- B13 B33 	Loop: B34-B33 inner post of N298 Freq: 0.985658
150   	testl   R8, R8
153   	jl,s   B47  P=0.000000 C=97776.000000
153
155   B35: #	B49 B36 &lt;- B34  Freq: 0.985657
155   	cmpl    R8, R10
158   	jge,s   B49  P=0.000000 C=97776.000000
158
15a   B36: #	B43 B37 &lt;- B35  Freq: 0.985657
15a   	movzwl  RDI, [RCX + #16 + R8 &lt;&lt; #1]	# ushort/char
160   	cmpl    R9, #47
164   	je,s   B43  P=0.105115 C=6745.000000
164
166   B37: #	B33 B38 &lt;- B43 B36  Freq: 0.985657
166   	incl    R8	# int
169   	cmpl    R8, R10
16c   	jl,s   B33	# loop end  P=0.500000 C=6745.000000
16c
16e   B38: #	B15 B39 &lt;- B37  Freq: 0.492828
16e   	cmpl    RDI, #47
171   	jne     B15  P=0.989796 C=98.000000
171
177   B39: #	B54 B40 &lt;- B38 B14  Freq: 0.0100577
177   	movq    RSI, [rsp + #8]	# spill
17c   	movl    RCX, R10	# spill
17f   	movl    R8, R11	# spill
      	nop 	# 1 bytes pad for loops and calls
183   	call,static  java.io.UnixFileSystem::normalize
        # java.io.UnixFileSystem::normalize @ bci:69  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # OopMap{off=392}
188
188   B40: #	B16 &lt;- B39  Freq: 0.0100575
        # Block is sole successor of call
188   	jmp     B16
188
18d   B41: #	B10 B42 &lt;- B9  Freq: 0.207218
18d   	cmpl    R9, #47
191   	jne     B10  P=1.000000 C=709.000000
191
197   B42: #	B29 &lt;- B41  Freq: 9.88091e-08
197   	jmp,s   B29
197
199   B43: #	B37 B44 &lt;- B36  Freq: 0.103607
199   	cmpl    RDI, #47
19c   	jne,s   B37  P=1.000000 C=709.000000
19c
19e   B44: #	B29 &lt;- B43  Freq: 4.94038e-08
19e   	jmp,s   B29
19e
1a0   B45: #	N458 &lt;- B5 B4  Freq: 1.98444e-06
1a0   	movl    RSI, #-122	# int
1a5   	movq    RBP, RDX	# spill
1a8   	movl    [rsp + #0], R10	# spill
      	nop 	# 3 bytes pad for loops and calls
1af   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.io.UnixFileSystem::normalize @ bci:16  L[0]=rsp + #8 L[1]=RBP L[2]=rsp + #0 L[3]=#0 L[4]=#0 L[5]=_
        # OopMap{rbp=Oop [8]=Oop off=436}
1b4   	int3	# ShouldNotReachHere
1b4
1b9   B46: #	B47 &lt;- B7  Freq: 9.85674e-07
1b9   	movl    R9, RBX	# spill
1b9
1bc   B47: #	B50 &lt;- B34 B46  Freq: 1.4785e-06
1bc   	movl    RBP, R8	# spill
1bf   	jmp,s   B50
1bf
1c1   B48: #	B49 &lt;- B8  Freq: 9.40011e-07
1c1   	movl    R9, RBX	# spill
1c1
1c4   B49: #	B50 &lt;- B35 B48  Freq: 1.41001e-06
1c4   	movl    RBP, R8	# spill
1c4
1c7   B50: #	N458 &lt;- B49 B47  Freq: 2.88851e-06
1c7   	movl    RSI, #6	# int
1cc   	movl    [rsp + #0], R9	# spill
1d0   	movq    [rsp + #16], RDX	# spill
1d5   	movl    [rsp + #4], R10	# spill
      	nop 	# 1 bytes pad for loops and calls
1db   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;6&apos;)
        # java.lang.String::charAt @ bci:13  L[0]=_ L[1]=RBP
        # java.io.UnixFileSystem::normalize @ bci:19  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #4 L[3]=rsp + #0 L[4]=RBP L[5]=_
        # OopMap{[8]=Oop [16]=Oop off=480}
1e0   	int3	# ShouldNotReachHere
1e0
1e5   B51: #	N458 &lt;- B1  Freq: 1.01328e-06
1e5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1eb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.UnixFileSystem::normalize @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap{off=496}
1f0   	int3	# ShouldNotReachHere
1f0
1f5   B52: #	N458 &lt;- B2  Freq: 1.01328e-06
1f5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1fb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::length @ bci:4  L[0]=_ STK[0]=#NULL
        # java.io.UnixFileSystem::normalize @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # OopMap{off=512}
200   	int3	# ShouldNotReachHere
200
205   B53: #	B55 &lt;- B29  Freq: 1.3947e-10
205   	# exception oop is in rax; no code emitted
205   	movq    RSI, RAX	# spill
208   	jmp,s   B55
208
20a   B54: #	B55 &lt;- B39  Freq: 1.00577e-07
20a   	# exception oop is in rax; no code emitted
20a   	movq    RSI, RAX	# spill
20a
20d   B55: #	N458 &lt;- B53 B54  Freq: 1.00717e-07
20d   	addq    rsp, 48	# Destroy frame
	popq   rbp

212   	jmp     rethrow_stub
212

</opto_assembly>
<writer thread='20227'/>
PrintAssembly request changed to PrintOptoAssembly
<writer thread='20739'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='8'>
{method} 
 - klass: {other class}
 - this oop:          0x00000006fae01f90
 - method holder:     &apos;java/lang/Object&apos;
 - constants:         0x00000006fae01b80 constant pool [87] for &apos;java/lang/Object&apos; cache=0x00000006faebb1a0
 - access:            0x81000001  public 
 - name:              &apos;&lt;init&gt;&apos;
 - signature:         &apos;()V&apos;
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       16
 - intrinsic id:      150 _Object_init
 - vtable index:      -2
 - i2i entry:         0x0000000103a96780
 - adapters:          AHE@0x00007fda94878670: 0xb0000000 i2c: 0x0000000103b468e0 c2i: 0x0000000103b469f4 c2iUV: 0x0000000103b469c7
 - compiled entry     0x0000000103b469f4
 - code size:         1
 - code start:        0x00000006fae01f78
 - code end (excl):   0x00000006fae01f79
 - method data:       0x00000006fb0c2c70
 - checked ex length: 0
 - linenumber start:  0x00000006fae01f79
 - localvar length:   1
 - localvar start:    0x00000006fae01f82
#
#  void ( java/lang/Object:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/lang/Object:NotNull *
# -- Old rsp -- Framesize: 32 --
#r191 rsp+28: in_preserve
#r190 rsp+24: return address
#r189 rsp+20: in_preserve
#r188 rsp+16: saved fp register
#r187 rsp+12: pad2, stack alignment
#r186 rsp+ 8: pad2, stack alignment
#r185 rsp+ 4: Fixed slot 1
#r184 rsp+ 0: Fixed slot 0
#
000   N44: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_heap_oop_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c   	movl    R10, [RSI + #8 (8-bit)]	# compressed klass ptr
030   	movl    R8, #1073741824	# int
036   	testl   R8, [R12 + R10 &lt;&lt; 3 + #156] (compressed oop addressing)
03e   	je,s   B3  P=0.000001 C=-1.000000
03e
040   B2: #	B4 B3 &lt;- B1  Freq: 0.999999
040   	movq    RBP, RSI	# spill
043   	call,static  wrapper for: _register_finalizer_Java
        # java.lang.Object::&lt;init&gt; @ bci:0  L[0]=RBP
        # OopMap{rbp=Oop off=72}
048
048   B3: #	N44 &lt;- B1 B2  Freq: 0.99998
048   	addq    rsp, 16	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

053   	ret
053
054   B4: #	N44 &lt;- B2  Freq: 9.99999e-06
054   	# exception oop is in rax; no code emitted
054   	movq    RSI, RAX	# spill
057   	addq    rsp, 16	# Destroy frame
	popq   rbp

05c   	jmp     rethrow_stub
05c

</opto_assembly>
<writer thread='20227'/>
<opto_assembly compile_id='7'>
{method} 
 - klass: {other class}
 - this oop:          0x00000006fb112270
 - method holder:     &apos;com/tmall/buy/EqualsTest&apos;
 - constants:         0x00000006fb110f78 constant pool [59] for &apos;com/tmall/buy/EqualsTest&apos; cache=0x00000006fb114638
 - access:            0x81000009  public static 
 - name:              &apos;setValue&apos;
 - signature:         &apos;([II)V&apos;
 - max stack:         5
 - max locals:        2
 - size of params:    2
 - method size:       16
 - vtable index:      -2
 - i2i entry:         0x0000000103a96780
 - adapters:          AHE@0x00007fda94878828: 0xba000000 i2c: 0x0000000103b4e220 c2i: 0x0000000103b4e337 c2iUV: 0x0000000103b4e30a
 - compiled entry     0x0000000103b4e337
 - code size:         5
 - code start:        0x00000006fb1121c8
 - code end (excl):   0x00000006fb1121cd
 - method data:       0x00000006fb121f38
 - checked ex length: 0
 - linenumber start:  0x00000006fb1121cd
 - localvar length:   2
 - localvar start:    0x00000006fb1121d6
#
#  void ( int[int:&gt;=0]:exact *, int )
#
#r018 rsi:rsi   : parm 0: int[int:&gt;=0]:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r191 rsp+44: in_preserve
#r190 rsp+40: return address
#r189 rsp+36: in_preserve
#r188 rsp+32: saved fp register
#r187 rsp+28: pad2, stack alignment
#r186 rsp+24: pad2, stack alignment
#r185 rsp+20: Fixed slot 1
#r184 rsp+16: Fixed slot 0
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B5 B4 B3  Freq: 1
abababab
000   B1: #	B5 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c   	movl    R11, [RSI + #12 (8-bit)]	# range
010   	NullCheck RSI
010
010   B2: #	B4 B3 &lt;- B1  Freq: 0.999999
010   	cmpl    RDX, R11	# unsigned
013   	jnb,us  B4  P=0.000001 C=-1.000000
013
015   B3: #	N1 &lt;- B2  Freq: 0.999998
015   	movl    [RSI + #16 + RDX &lt;&lt; #2], RDX	# int
019   	addq    rsp, 32	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

024   	ret
024
025   B4: #	N1 &lt;- B2  Freq: 1.01328e-06
025   	movq    RBP, RSI	# spill
028   	movl    [rsp + #4], RDX	# spill
02c   	movl    RSI, #-28	# int
      	nop 	# 2 bytes pad for loops and calls
033   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.tmall.buy.EqualsTest::setValue @ bci:3  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #4 STK[2]=rsp + #4
        # OopMap{rbp=Oop off=56}
038   	int3	# ShouldNotReachHere
038
03d   B5: #	N1 &lt;- B1  Freq: 1.01328e-06
03d   	movl    RSI, #-10	# int
042   	movl    [rsp + #0], RDX	# spill
      	nop 	# 2 bytes pad for loops and calls
047   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.tmall.buy.EqualsTest::setValue @ bci:3  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=rsp + #0 STK[2]=rsp + #0
        # OopMap{off=76}
04c   	int3	# ShouldNotReachHere
04c

</opto_assembly>
<writer thread='20739'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='9' compile_kind='osr'>
{method} 
 - klass: {other class}
 - this oop:          0x00000006fb111fd8
 - method holder:     &apos;com/tmall/buy/EqualsTest&apos;
 - constants:         0x00000006fb110f78 constant pool [59] for &apos;com/tmall/buy/EqualsTest&apos; cache=0x00000006fb114638
 - access:            0xc1000009  public static 
 - name:              &apos;main&apos;
 - signature:         &apos;([Ljava/lang/String;)V&apos;
 - max stack:         6
 - max locals:        5
 - size of params:    1
 - method size:       16
 - vtable index:      -2
 - i2i entry:         0x0000000103a96780
 - adapters:          AHE@0x00007fda94878670: 0xb0000000 i2c: 0x0000000103b468e0 c2i: 0x0000000103b469f4 c2iUV: 0x0000000103b469c7
 - compiled entry     0x0000000103b469f4
 - code size:         95
 - code start:        0x00000006fb111f20
 - code end (excl):   0x00000006fb111f7f
 - method data:       0x00000006fb1249f0
 - checked ex length: 0
 - linenumber start:  0x00000006fb111f7f
 - localvar length:   5
 - localvar start:    0x00000006fb111f9a
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 64 --
#r191 rsp+60: in_preserve
#r190 rsp+56: return address
#r189 rsp+52: in_preserve
#r188 rsp+48: saved fp register
#r187 rsp+44: pad2, stack alignment
#r186 rsp+40: pad2, stack alignment
#r185 rsp+36: Fixed slot 1
#r184 rsp+32: Fixed slot 0
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N336: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B25 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

01c   	movl    RBX, [RSI]	# int
01e   	movl    R13, [RSI + #24 (8-bit)]	# int
022   	movq    RBP, [RSI + #16 (8-bit)]	# ptr
026   	movq    R14, [RSI + #8 (8-bit)]	# ptr
02a   	movq    RDI, RSI	# spill
02d   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
03a   	testq   RBP, RBP	# ptr
03d   	je     B25  P=0.001000 C=-1.000000
03d
043   B2: #	B27 B3 &lt;- B1  Freq: 0.999
043   	movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
047   	cmpl    R10, narrowoop: precise klass [I: 0x00007fda94063078:Constant:exact *	# compressed ptr
04e   	jne,u  B27  P=0.000001 C=-1.000000
04e
054   B3: #	B4 &lt;- B2  Freq: 0.998999
054   	movq    R9, RBP	# spill
057   	# checkcastPP of R9
057
057   B4: #	B26 B5 &lt;- B3 B25  Freq: 0.999999
057   	testq   R14, R14	# ptr
05a   	je     B26  P=0.001000 C=-1.000000
05a
060   B5: #	B27 B6 &lt;- B4  Freq: 0.998999
060   	movl    R11, [R14 + #8 (8-bit)]	# compressed klass ptr
064   	cmpl    R11, narrowoop: precise klass [I: 0x00007fda94063078:Constant:exact *	# compressed ptr
06b   	jne,u  B27  P=0.000001 C=-1.000000
06b
071   B6: #	B7 &lt;- B5  Freq: 0.998998
071   	# checkcastPP of R14
071
071   B7: #	B28 B8 &lt;- B6 B26  Freq: 0.999998
071   	movl    RBP, [R9 + #12 (8-bit)]	# range
075   	NullCheck R9
075
075   B8: #	B28 B9 &lt;- B7  Freq: 0.999997
075   	movl    RCX, [R14 + #12 (8-bit)]	# range
079   	NullCheck R14
079
079   B9: #	B22 B10 &lt;- B8  Freq: 0.999996
079   	cmpl    RBX, RBP
07b   	jge     B22  P=0.000000 C=12240.000000
07b
081   B10: #	B11 &lt;- B9  Freq: 0.999995
081   	movl    R11, RBX	# spill
084   	incl    R11	# int
087   	xorl    R8, R8	# int
08a   	cmpl    R11, R8
08d   	cmovllt R11, R8	# max
091   	cmpl    R11, RBP
094   	cmovlgt R11, RBP	# min
094
098   B11: #	B23 B12 &lt;- B10 B13 	Loop: B11-B13 inner pre of N375 Freq: 1.99999
098   	cmpl    RBX, RBP	# unsigned
09a   	jnb,u  B23  P=0.000001 C=-1.000000
09a
0a0   B12: #	B24 B13 &lt;- B11  Freq: 1.99998
0a0   	movl    [R9 + #16 + RBX &lt;&lt; #2], RBX	# int
0a5   	cmpl    RBX, RCX	# unsigned
0a7   	jnb,u  B24  P=0.000001 C=-1.000000
0a7
0ad   B13: #	B11 B14 &lt;- B12  Freq: 1.99998
0ad   	movl    [R14 + #16 + RBX &lt;&lt; #2], RBX	# int
0b2   	incl    RBX	# int
0b4   	cmpl    RBX, R11
0b7   	jl,s   B11	# loop end  P=0.500000 C=12240.000000
0b7
0b9   B14: #	B18 B15 &lt;- B13  Freq: 0.999991
0b9   	cmpl    RBP, RCX
0bb   	movl    R10, RBP	# spill
0be   	cmovlgt R10, RCX	# min
0c2   	movl    RSI, R10	# spill
0c5   	addl    RSI, #-7	# int
0c8   	movl    R8, #-2147483648	# int
0ce   	cmpl    R10, RSI
0d1   	cmovll RSI, R8	# signed, int
0d5   	cmpl    RBX, RSI
0d7   	jge     B18  P=0.000001 C=-1.000000
0d7
0dd   B15: #	B16 &lt;- B14  Freq: 0.99999
0dd   	movl    [rsp + #0], R13	# spill
0e1   	movl    [rsp + #4], RCX	# spill
      	nop 	# 11 bytes pad for loops and calls

0f0   B16: #	B16 B17 &lt;- B15 B16 	Loop: B16-B16 inner main of N129 Freq: 999990
0f0   	movl    [R9 + #16 + RBX &lt;&lt; #2], RBX	# int
0f5   	movl    [R14 + #16 + RBX &lt;&lt; #2], RBX	# int
0fa   	movslq  RAX, RBX	# i2l
0fd   	movl    R10, RBX	# spill
100   	addl    R10, #7	# int
104   	movl    R13, RBX	# spill
107   	addl    R13, #6	# int
10b   	movl    R8, RBX	# spill
10e   	addl    R8, #5	# int
112   	movl    R11, RBX	# spill
115   	addl    R11, #4	# int
119   	movl    RDI, RBX	# spill
11b   	addl    RDI, #3	# int
11e   	movl    RCX, RBX	# spill
120   	addl    RCX, #2	# int
123   	movl    RDX, RBX	# spill
125   	incl    RDX	# int
127   	movl    [R9 + #20 + RAX &lt;&lt; #2], RDX	# int
12c   	movl    [R14 + #20 + RAX &lt;&lt; #2], RDX	# int
131   	movl    [R9 + #24 + RAX &lt;&lt; #2], RCX	# int
136   	movl    [R14 + #24 + RAX &lt;&lt; #2], RCX	# int
13b   	movl    [R9 + #28 + RAX &lt;&lt; #2], RDI	# int
140   	movl    [R14 + #28 + RAX &lt;&lt; #2], RDI	# int
145   	movl    [R9 + #32 + RAX &lt;&lt; #2], R11	# int
14a   	movl    [R14 + #32 + RAX &lt;&lt; #2], R11	# int
14f   	movl    [R9 + #36 + RAX &lt;&lt; #2], R8	# int
154   	movl    [R14 + #36 + RAX &lt;&lt; #2], R8	# int
159   	movl    [R9 + #40 + RAX &lt;&lt; #2], R13	# int
15e   	movl    [R14 + #40 + RAX &lt;&lt; #2], R13	# int
163   	movl    [R9 + #44 + RAX &lt;&lt; #2], R10	# int
168   	movl    [R14 + #44 + RAX &lt;&lt; #2], R10	# int
16d   	addl    RBX, #8	# int
170   	cmpl    RBX, RSI
172   	jl     B16	# loop end  P=1.000000 C=12240.000000
172
178   B17: #	B18 &lt;- B16  Freq: 0.99999
178   	movl    R13, [rsp + #0]	# spill
17c   	movl    RCX, [rsp + #4]	# spill
17c
180   B18: #	B22 B19 &lt;- B14 B17  Freq: 0.999991
180   	cmpl    RBX, RBP
182   	jge,s   B22  P=0.000001 C=-1.000000
182
184   B19: #	B23 B20 &lt;- B18 B21 	Loop: B19-B21 inner post of N375 Freq: 328962
184   	cmpl    RBX, RBP	# unsigned
186   	jnb,us  B23  P=0.000001 C=-1.000000
186
188   B20: #	B24 B21 &lt;- B19  Freq: 328962
188   	movl    [R9 + #16 + RBX &lt;&lt; #2], RBX	# int
18d   	cmpl    RBX, RCX	# unsigned
18f   	jnb,us  B24  P=0.000001 C=-1.000000
18f
191   B21: #	B19 B22 &lt;- B20  Freq: 328962
191   	movl    [R14 + #16 + RBX &lt;&lt; #2], RBX	# int
196   	incl    RBX	# int
198   	cmpl    RBX, RBP
19a   	jl,s   B19	# loop end  P=0.999999 C=12240.000000
19a
19c   B22: #	N336 &lt;- B9 B21 B18  Freq: 0.333331
19c   	movl    RSI, #41	# int
1a1   	movq    RBP, R9	# spill
1a4   	movq    [rsp + #0], R14	# spill
1a8   	movl    [rsp + #8], R13	# spill
      	nop 	# 2 bytes pad for loops and calls
1af   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;41&apos;)
        # com.tmall.buy.EqualsTest::main @ bci:53  L[0]=_ L[1]=rsp + #8 L[2]=RBP L[3]=rsp + #0 L[4]=_
        # OopMap{rbp=Oop [0]=Oop off=436}
1b4   	int3	# ShouldNotReachHere
1b4
1b9   B23: #	N336 &lt;- B19 B11  Freq: 0.333333
1b9   	movl    RSI, #-28	# int
1be   	movq    [rsp + #0], R14	# spill
1c2   	movq    [rsp + #16], R9	# spill
1c7   	movl    [rsp + #12], RBX	# spill
1cb   	movl    [rsp + #24], RBX	# spill
1cf   	movl    [rsp + #28], R13	# spill
      	nop 	# 3 bytes pad for loops and calls
1d7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.tmall.buy.EqualsTest::setValue @ bci:3  L[0]=_ L[1]=_ STK[0]=rsp + #16 STK[1]=rsp + #24 STK[2]=rsp + #12
        # com.tmall.buy.EqualsTest::main @ bci:30  L[0]=_ L[1]=rsp + #28 L[2]=rsp + #16 L[3]=rsp + #0 L[4]=rsp + #12
        # OopMap{[0]=Oop [16]=Oop off=476}
1dc   	int3	# ShouldNotReachHere
1dc
1e1   B24: #	N336 &lt;- B20 B12  Freq: 0.333332
1e1   	movl    RSI, #-28	# int
1e6   	movq    RBP, R9	# spill
1e9   	movq    [rsp + #16], R14	# spill
1ee   	movl    [rsp + #12], RBX	# spill
1f2   	movl    [rsp + #24], RBX	# spill
1f6   	movl    [rsp + #28], R13	# spill
1fb   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.tmall.buy.EqualsTest::setValue @ bci:3  L[0]=_ L[1]=_ STK[0]=rsp + #16 STK[1]=rsp + #24 STK[2]=rsp + #12
        # com.tmall.buy.EqualsTest::main @ bci:36  L[0]=_ L[1]=rsp + #28 L[2]=RBP L[3]=rsp + #16 L[4]=rsp + #12
        # OopMap{rbp=Oop [16]=Oop off=512}
200   	int3	# ShouldNotReachHere
200
205   B25: #	B4 &lt;- B1  Freq: 0.000999987
205   	xorl    R9, R9	# ptr
208   	jmp     B4
208
20d   B26: #	B7 &lt;- B4  Freq: 0.000999986
20d   	xorl    R14, R14	# ptr
210   	jmp     B7
210
215   B27: #	N336 &lt;- B2 B5  Freq: 1.998e-06
215   	movl    RSI, #-99	# int
21a   	movq    [rsp + #0], R14	# spill
21e   	movl    [rsp + #8], RBX	# spill
222   	movl    [rsp + #12], R13	# spill
227   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # com.tmall.buy.EqualsTest::main @ bci:20  L[0]=_ L[1]=rsp + #12 L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8
        # OopMap{rbp=Oop [0]=Oop off=556}
22c   	int3	# ShouldNotReachHere
22c
231   B28: #	N336 &lt;- B8 B7  Freq: 2.02655e-06
231   	movl    RSI, #-122	# int
236   	movq    RBP, R9	# spill
239   	movq    [rsp + #0], R14	# spill
23d   	movl    [rsp + #8], RBX	# spill
241   	movl    [rsp + #12], R13	# spill
      	nop 	# 1 bytes pad for loops and calls
247   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # com.tmall.buy.EqualsTest::main @ bci:20  L[0]=_ L[1]=rsp + #12 L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #8
        # OopMap{rbp=Oop [0]=Oop off=588}
24c   	int3	# ShouldNotReachHere
24c

</opto_assembly>
<writer thread='20227'/>
PrintAssembly request changed to PrintOptoAssembly
<opto_assembly compile_id='10' compile_kind='osr'>
{method} 
 - klass: {other class}
 - this oop:          0x00000006fb111fd8
 - method holder:     &apos;com/tmall/buy/EqualsTest&apos;
 - constants:         0x00000006fb110f78 constant pool [59] for &apos;com/tmall/buy/EqualsTest&apos; cache=0x00000006fb114638
 - access:            0xc1000009  public static 
 - name:              &apos;main&apos;
 - signature:         &apos;([Ljava/lang/String;)V&apos;
 - max stack:         6
 - max locals:        5
 - size of params:    1
 - method size:       16
 - vtable index:      -2
 - i2i entry:         0x0000000103a96780
 - adapters:          AHE@0x00007fda94878670: 0xb0000000 i2c: 0x0000000103b468e0 c2i: 0x0000000103b469f4 c2iUV: 0x0000000103b469c7
 - compiled entry     0x0000000103b469f4
 - code size:         95
 - code start:        0x00000006fb111f20
 - code end (excl):   0x00000006fb111f7f
 - method data:       0x00000006fb1249f0
 - checked ex length: 0
 - linenumber start:  0x00000006fb111f7f
 - localvar length:   5
 - localvar start:    0x00000006fb111f9a
#
#  void ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 80 --
#r191 rsp+76: in_preserve
#r190 rsp+72: return address
#r189 rsp+68: in_preserve
#r188 rsp+64: saved fp register
#r187 rsp+60: pad2, stack alignment
#r186 rsp+56: pad2, stack alignment
#r185 rsp+52: Fixed slot 1
#r184 rsp+48: Fixed slot 0
#r203 rsp+44: spill
#r202 rsp+40: spill
#r201 rsp+36: spill
#r200 rsp+32: spill
#r199 rsp+28: spill
#r198 rsp+24: spill
#r197 rsp+20: spill
#r196 rsp+16: spill
#r195 rsp+12: spill
#r194 rsp+ 8: spill
#r193 rsp+ 4: spill
#r192 rsp+ 0: spill
#
000   N400: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# breakpoint
      	nop 	# 11 bytes pad for loops and calls

010   B1: #	B27 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

01c   	movl    RBX, [RSI]	# int
01e   	movl    R13, [RSI + #24 (8-bit)]	# int
022   	movq    RBP, [RSI + #16 (8-bit)]	# ptr
026   	movq    R14, [RSI + #8 (8-bit)]	# ptr
02a   	movq    RDI, RSI	# spill
02d   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
03a   	testq   RBP, RBP	# ptr
03d   	je     B27  P=0.001000 C=-1.000000
03d
043   B2: #	B29 B3 &lt;- B1  Freq: 0.999
043   	movl    R11, [RBP + #8 (8-bit)]	# compressed klass ptr
047   	cmpl    R11, narrowoop: precise klass [I: 0x00007fda94063078:Constant:exact *	# compressed ptr
04e   	jne,u  B29  P=0.000001 C=-1.000000
04e
054   B3: #	B4 &lt;- B2  Freq: 0.998999
054   	movq    R10, RBP	# spill
057   	# checkcastPP of R10
057
057   B4: #	B28 B5 &lt;- B3 B27  Freq: 0.999999
057   	testq   R14, R14	# ptr
05a   	je     B28  P=0.001000 C=-1.000000
05a
060   B5: #	B29 B6 &lt;- B4  Freq: 0.998999
060   	movl    R11, [R14 + #8 (8-bit)]	# compressed klass ptr
064   	cmpl    R11, narrowoop: precise klass [I: 0x00007fda94063078:Constant:exact *	# compressed ptr
06b   	jne,u  B29  P=0.000001 C=-1.000000
06b
071   B6: #	B8 &lt;- B5  Freq: 0.998998
071   	# checkcastPP of R14
071   	jmp,s   B8
071
073   B7: #	B8 &lt;- B12  top-of-loop Freq: 233016
073   	movl    [R14 + #16 + RBX &lt;&lt; #2], RBX	# int
078   	incl    RBX	# int
07a   	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # com.tmall.buy.EqualsTest::main @ bci:50  L[0]=_ L[1]=R13 L[2]=R10 L[3]=R14 L[4]=RBX
        # OopMap{r10=Oop r14=Oop off=122}
080
080   B8: #	B33 B9 &lt;- B6 B28 B7 B21 	Loop: B8-B7 inner  Freq: 233017
080   	movl    R8, [R10 + #12 (8-bit)]	# range
084   	NullCheck R10
084
084   B9: #	B15 B10 &lt;- B8  Freq: 233016
084   	cmpl    RBX, R8
087   	jge,s   B15  P=0.000000 C=137830.000000
087
089   B10: #	B14 B11 &lt;- B9  Freq: 233016
089   	cmpl    RBX, R8	# unsigned
08c   	jnb,us  B14  P=0.000001 C=-1.000000
08c
08e   B11: #	B34 B12 &lt;- B10  Freq: 233016
08e   	movl    [R10 + #16 + RBX &lt;&lt; #2], RBX	# int
093   	movl    R11, [R14 + #12 (8-bit)]	# range
097   	NullCheck R14
097
097   B12: #	B7 B13 &lt;- B11  Freq: 233016
097   	cmpl    RBX, R11	# unsigned
09a   	jb,us  B7  P=0.999999 C=-1.000000
09a
09c   B13: #	N400 &lt;- B12  Freq: 0.23611
09c   	movl    RSI, #-28	# int
0a1   	movl    RBP, R13	# spill
0a4   	movq    [rsp + #0], R10	# spill
0a8   	movq    [rsp + #24], R14	# spill
0ad   	movl    [rsp + #20], RBX	# spill
0b1   	movl    [rsp + #32], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
0b7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.tmall.buy.EqualsTest::setValue @ bci:3  L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=rsp + #32 STK[2]=rsp + #20
        # com.tmall.buy.EqualsTest::main @ bci:36  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #24 L[4]=rsp + #20
        # OopMap{[0]=Oop [24]=Oop off=188}
0bc   	int3	# ShouldNotReachHere
0bc
0c1   B14: #	N400 &lt;- B10  Freq: 0.23611
0c1   	movl    RSI, #-28	# int
0c6   	movl    RBP, R13	# spill
0c9   	movq    [rsp + #8], R14	# spill
0ce   	movq    [rsp + #24], R10	# spill
0d3   	movl    [rsp + #20], RBX	# spill
0d7   	movl    [rsp + #32], RBX	# spill
0db   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.tmall.buy.EqualsTest::setValue @ bci:3  L[0]=_ L[1]=_ STK[0]=rsp + #24 STK[1]=rsp + #32 STK[2]=rsp + #20
        # com.tmall.buy.EqualsTest::main @ bci:30  L[0]=_ L[1]=RBP L[2]=rsp + #24 L[3]=rsp + #8 L[4]=rsp + #20
        # OopMap{[8]=Oop [24]=Oop off=224}
0e0   	int3	# ShouldNotReachHere
0e0
0e5   B15: #	B39 B16 &lt;- B9  Freq: 0.111111
0e5   	movq    R11, R10	# spill
0e8   	movl    [rsp + #0], R13	# spill
0ec   	movq    R8, java/lang/Class:exact *	# ptr
0f6   	movl    RBP, [R8 + #92 (8-bit)]	# compressed ptr ! Field: java/lang/System.out
0fa   	movq    RSI, R11	# spill
0fd   	movq    RDX, R14	# spill
      	nop 	# 3 bytes pad for loops and calls
103   	call,static  java.lang.Object::equals
        # com.tmall.buy.EqualsTest::main @ bci:58  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop off=264}
108
108   B16: #	B30 B17 &lt;- B15  Freq: 0.111109
        # Block is sole successor of call
108   	movl    [rsp + #4], RAX	# spill
10c   	testl   RBP, RBP	# compressed ptr
10e   	je     B30  P=0.000001 C=-1.000000
10e
114   B17: #	B40 B18 &lt;- B16  Freq: 0.111109
114   	decode_heap_oop_not_null RSI,RBP
118   	movl    RDX, RAX	# spill
      	nop 	# 1 bytes pad for loops and calls
11b   	call,static  java.io.PrintStream::println
        # com.tmall.buy.EqualsTest::main @ bci:61  L[0]=_ L[1]=rsp + #0 L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=288}
120
120   B18: #	B22 B19 &lt;- B17  Freq: 0.111106
        # Block is sole successor of call
120   	movl    RBP, [rsp + #0]	# spill
123   	incl    RBP	# int
125   	cmpl    RBP, #5
128   	jge,s   B22  P=0.500000 C=-1.000000
128
12a   B19: #	B38 B20 &lt;- B18  Freq: 0.0555531
12a   	movq    RSI, precise klass [I: 0x00007fda94063078:Constant:exact *	# ptr
134   	movl    RDX, #10000000	# int
      	nop 	# 2 bytes pad for loops and calls
13b   	call,static  wrapper for: _new_array_Java
        # com.tmall.buy.EqualsTest::main @ bci:9  L[0]=_ L[1]=RBP L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=320}
140
140   B20: #	B36 B21 &lt;- B19  Freq: 0.055552
        # Block is sole successor of call
140   	
140   	movq    R10, RAX	# spill
143   	# checkcastPP of R10
143   	movq    [rsp + #0], R10	# spill
147   	movq    RSI, precise klass [I: 0x00007fda94063078:Constant:exact *	# ptr
151   	movl    RDX, #10000000	# int
      	nop 	# 1 bytes pad for loops and calls
157   	call,static  wrapper for: _new_array_Java
        # com.tmall.buy.EqualsTest::main @ bci:14  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=_ L[4]=_
        # OopMap{[0]=Oop off=348}
15c
15c   B21: #	B8 &lt;- B20  Freq: 0.0555509
        # Block is sole successor of call
15c   	
15c   	movq    R14, RAX	# spill
15f   	# checkcastPP of R14
15f   	xorl    RBX, RBX	# int
161   	movl    R13, RBP	# spill
164   	movq    R10, [rsp + #0]	# spill
168   	jmp     B8
168
16d   B22: #	B31 B23 &lt;- B18  Freq: 0.0555531
16d   	movq    R10, java/lang/Class:exact *	# ptr
177   	movl    R11, [R10 + #92 (8-bit)]	# compressed ptr ! Field: java/lang/System.out
17b   	testl   R11, R11	# compressed ptr
17e   	je,s   B31  P=0.000001 C=-1.000000
17e
180   B23: #	B37 B24 &lt;- B22  Freq: 0.0555531
180   	decode_heap_oop_not_null RSI,R11
184   	xorl    RDX, RDX	# int
      	nop 	# 1 bytes pad for loops and calls
187   	call,static  java.io.PrintStream::println
        # com.tmall.buy.EqualsTest::main @ bci:81  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=396}
18c
18c   B24: #	B32 B25 &lt;- B23  Freq: 0.055552
        # Block is sole successor of call
18c   	movq    R10, java/lang/Class:exact *	# ptr
196   	movl    R10, [R10 + #92 (8-bit)]	# compressed ptr ! Field: java/lang/System.out
19a   	testl   R10, R10	# compressed ptr
19d   	je,s   B32  P=0.000001 C=-1.000000
19d
19f   B25: #	B35 B26 &lt;- B24  Freq: 0.0555519
19f   	decode_heap_oop_not_null RSI,R10
1a3   	xorl    RDX, RDX	# ptr
      	nop 	# 2 bytes pad for loops and calls
1a7   	call,static  java.io.PrintStream::println
        # com.tmall.buy.EqualsTest::main @ bci:91  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=428}
1ac
1ac   B26: #	N400 &lt;- B25  Freq: 0.0555508
        # Block is sole successor of call
1ac   	addq    rsp, 64	# Destroy frame
	popq   rbp
	testl  rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC

1b7   	ret
1b7
1b8   B27: #	B4 &lt;- B1  Freq: 0.000999987
1b8   	xorl    R10, R10	# ptr
1bb   	jmp     B4
1bb
1c0   B28: #	B8 &lt;- B4  Freq: 0.000999986
1c0   	xorl    R14, R14	# ptr
1c3   	jmp     B8
1c3
1c8   B29: #	N400 &lt;- B2 B5  Freq: 1.998e-06
1c8   	movl    RSI, #-99	# int
1cd   	movl    [rsp + #0], R13	# spill
1d1   	movq    [rsp + #8], R14	# spill
1d6   	movl    [rsp + #4], RBX	# spill
      	nop 	# 1 bytes pad for loops and calls
1db   	call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos;)
        # com.tmall.buy.EqualsTest::main @ bci:20  L[0]=_ L[1]=rsp + #0 L[2]=RBP L[3]=rsp + #8 L[4]=rsp + #4
        # OopMap{rbp=Oop [8]=Oop off=480}
1e0   	int3	# ShouldNotReachHere
1e0
1e5   B30: #	N400 &lt;- B16  Freq: 1.12584e-07
1e5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1eb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.tmall.buy.EqualsTest::main @ bci:61  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=rsp + #4
        # OopMap{off=496}
1f0   	int3	# ShouldNotReachHere
1f0
1f5   B31: #	N400 &lt;- B22  Freq: 5.62908e-08
1f5   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
1fb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.tmall.buy.EqualsTest::main @ bci:81  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=#0
        # OopMap{off=512}
200   	int3	# ShouldNotReachHere
200
205   B32: #	N400 &lt;- B24  Freq: 5.62897e-08
205   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
20b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.tmall.buy.EqualsTest::main @ bci:91  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=#NULL STK[1]=#NULL
        # OopMap{off=528}
210   	int3	# ShouldNotReachHere
210
215   B33: #	N400 &lt;- B8  Freq: 0.236111
215   	movl    RSI, #-10	# int
      	nop 	# 1 bytes pad for loops and calls
21b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.tmall.buy.EqualsTest::main @ bci:23  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=#NULL
        # OopMap{off=544}
220   	int3	# ShouldNotReachHere
220
225   B34: #	N400 &lt;- B11  Freq: 0.23611
225   	movl    RSI, #-10	# int
22a   	movl    [rsp + #0], RBX	# spill
      	nop 	# 2 bytes pad for loops and calls
22f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.tmall.buy.EqualsTest::setValue @ bci:3  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=rsp + #0 STK[2]=rsp + #0
        # com.tmall.buy.EqualsTest::main @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # OopMap{off=564}
234   	int3	# ShouldNotReachHere
234
239   B35: #	B41 &lt;- B25  Freq: 5.55519e-07
239   	# exception oop is in rax; no code emitted
239   	movq    RSI, RAX	# spill
23c   	jmp,s   B41
23c
23e   B36: #	B41 &lt;- B20  Freq: 5.5552e-07
23e   	# exception oop is in rax; no code emitted
23e   	movq    RSI, RAX	# spill
241   	jmp,s   B41
241
243   B37: #	B41 &lt;- B23  Freq: 5.55531e-07
243   	# exception oop is in rax; no code emitted
243   	movq    RSI, RAX	# spill
246   	jmp,s   B41
246
248   B38: #	B41 &lt;- B19  Freq: 5.55531e-07
248   	# exception oop is in rax; no code emitted
248   	movq    RSI, RAX	# spill
24b   	jmp,s   B41
24b
24d   B39: #	B41 &lt;- B15  Freq: 1.11111e-06
24d   	# exception oop is in rax; no code emitted
24d   	movq    RSI, RAX	# spill
250   	jmp,s   B41
250
252   B40: #	B41 &lt;- B17  Freq: 1.11109e-06
252   	# exception oop is in rax; no code emitted
252   	movq    RSI, RAX	# spill
252
255   B41: #	N400 &lt;- B35 B39 B40 B38 B36 B37  Freq: 4.4443e-06
255   	addq    rsp, 64	# Destroy frame
	popq   rbp

25a   	jmp     rethrow_stub
25a

</opto_assembly>
<writer thread='6403'/>
C1 Runtime statistics:
 _resolve_invoke_virtual_cnt:     0
 _resolve_invoke_opt_virtual_cnt: 5
 _resolve_invoke_static_cnt:      0
 _handle_wrong_method_cnt:        0
 _ic_miss_cnt:                    0
 _generic_arraycopy_cnt:          0
 _generic_arraycopystub_cnt:      0
 _byte_arraycopy_cnt:             0
 _short_arraycopy_cnt:            0
 _int_arraycopy_cnt:              0
 _long_arraycopy_cnt:             0
 _primitive_arraycopy_cnt:        0
 _oop_arraycopy_cnt (C):          0
 _oop_arraycopy_cnt (stub):       0
 _arraycopy_slowcase_cnt:         0
 _arraycopy_checkcast_cnt:        0
 _arraycopy_checkcast_attempt_cnt:0
 _new_type_array_slowcase_cnt:    0
 _new_object_array_slowcase_cnt:  0
 _new_instance_slowcase_cnt:      0
 _new_multi_array_slowcase_cnt:   0
 _monitorenter_slowcase_cnt:      0
 _monitorexit_slowcase_cnt:       0
 _patch_code_slowcase_cnt:        0
 _throw_range_check_exception_count:            0:
 _throw_index_exception_count:                  0:
 _throw_div0_exception_count:                   0:
 _throw_null_pointer_exception_count:           0:
 _throw_class_cast_exception_count:             0:
 _throw_incompatible_class_change_error_count:  0:
 _throw_array_store_exception_count:            0:
 _throw_count:                                  0:

<statistics type='deoptimization'>
Deoptimization traps recorded:
     1 (100.0%) total
            unloaded/reinterpret/getstatic: 1 (100.0%)
</statistics>
<statistics type='SharedRuntime'>
    6 new array requires GC
    0 inline cache miss in compiled
    0 wrong method
    0 unresolved static call site
    0 unresolved virtual call site
    5 unresolved opt virtual call site
   11 slow partial subtype
   12 byte array copies
   12 short array copies
   12 int array copies
   12 long array copies
AdapterHandlerTable: empty 183 longest 3 total 146 average 1.327273
AdapterHandlerTable: lookups 5855 buckets 6286 equals 5709 hits 5709 compact 5709
</statistics>
<statistics type='nmethod'>
Statistics for 10 bytecoded nmethods:
 total in heap  = 17024
 relocation     = 432
 main code      = 4640
 stub code      = 360
 oops           = 152
 scopes data    = 1920
 scopes pcs     = 5984
 dependencies   = 80
 handler table  = 264
 nul chk table  = 168
Debug Data Chunks: 503, shared 79+158, non-SP&apos;s elided 0
PcDesc Statistics:  11 queries, 8.27 comparisons per query
  caches=10 queries=11/0, hits=0+3, tests=28+63, adds=8
</statistics>
<statistics type='opto'>
--- Compiler Statistics ---
Methods seen: 18  Methods parsed: 18  Nodes created: 10295
Blocks parsed: 78  Blocks seen: 80
65 original NULL checks - 38 elided (58%); optimizer leaves 39,
13 made implicit (33%)
CCP: 10  constants found: 0
Total frameslots = 144, Max frameslots = 32
Inserted 0 spill loads, 0 spill stores, 0 mem-mem moves and 0 copies.
Total load cost=      0, store cost =      0, mem-mem cost =  0.00, copy cost =     0.
Adjusted spill cost =       0.
Conservatively coalesced 54 copies, 0 pairs, 63 post alloc.
Used cisc instruction  2,  remained in register 136
Average allocation trips 1.192308
High Pressure Blocks = 0, Low Pressure Blocks = 0
Nops added 0 bytes to total of 6442 bytes, for 0.00%
Peephole: peephole rules applied: 0
PhaseIdealLoop=63, sum _unique=26881
</statistics>
<statistics type='intrinsic'>
Compiler intrinsic usage:
     1 (50.0%) _min (worked)
     1 (50.0%) _equals (worked)
     2 (100.0%) total (worked)
</statistics>
<writer thread='13571'/>
<destroy_vm stamp='0.672'/>
<tty_done stamp='1.014'/>
</tty>
<hotspot_log_done stamp='1.014'/>
</hotspot_log>
